<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>程序启动过程</title>
    <link href="/2025/02/12/program-initiation-process/"/>
    <url>/2025/02/12/program-initiation-process/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文源码来源于<code>kernel-6.13.2</code>和<code>glibc-2.39</code>，并对代码进行了一定的修改。</p><h1 id="可执行文件的装载"><a href="#可执行文件的装载" class="headerlink" title="可执行文件的装载"></a>可执行文件的装载</h1><h2 id="execve"><a href="#execve" class="headerlink" title="execve"></a>execve</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">asmlinkage <span class="hljs-type">long</span> <span class="hljs-title function_">sys_execve</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *filename,</span><br><span class="hljs-params"><span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *<span class="hljs-type">const</span> __user *argv,</span><br><span class="hljs-params"><span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *<span class="hljs-type">const</span> __user *envp)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">do_execve</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> filename *filename,</span><br><span class="hljs-params"><span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *<span class="hljs-type">const</span> __user *__argv,</span><br><span class="hljs-params"><span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *<span class="hljs-type">const</span> __user *__envp)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">user_arg_ptr</span> <span class="hljs-title">argv</span> =</span> &#123; .ptr.native = __argv &#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">user_arg_ptr</span> <span class="hljs-title">envp</span> =</span> &#123; .ptr.native = __envp &#125;;<br><span class="hljs-keyword">return</span> do_execveat_common(AT_FDCWD, filename, argv, envp, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们关注的调用链如下：</p><p><code>do_execveat_common -&gt; exec_binprm -&gt; search_binary_handler -&gt; load_elf_binary</code></p><h2 id="load-elf-binary"><a href="#load-elf-binary" class="headerlink" title="load_elf_binary"></a>load_elf_binary</h2><ol><li><p>文件格式校验：程序首先读取了e_ident中的魔数并进行了校验，elf_ident是ELF文件最头部的一个长度为16字节的数组，不区分架构和系统位数。e_ident起始的4个字节固定为<code>\x7fELF</code>，通过校验该位可以确定是否为elf文件。</p><p>然后识别文件是否为可执行文件或动态链接文件，ELF文件当前主要有4种格式，分别为可重定位文件(ET_REL)、可执行文件(ET_EXEC)、共享目标文件(ET_DYN)和core文件(ET_CORE)。load_elf_binary函数只负责解析exec和dyn文件。</p><p>最后还解析了文件依赖的系统架构等必要项。</p></li><li><p>读取程序头：程序头是描述与程序执行直接相关的目标文件结构信息，用于在文件中定位各个段的映像，同时包含其他一些用来为程序创建进程映像所必须的信息。</p></li><li><p>读取解释器段：如果程序需要动态链接，则需要加载解释器段(PT_INTERP)，程序遍历所有的程序头，识别到解释器段后，读取该段的内容。解释器段实际上是标明解释器程序文件路径的字符串，内核根据字符串指向的文件，使用open_exec函数打开解释器。</p></li><li><p>读取解释器：解释器也是一个elf文件，这里读取解释器以便于后续操作</p></li><li><p>加载程序段：加载所有类型为PT_LOAD的段，当处理第1个PT_LOAD段时，如果文件为dyn类型，还需要对其进行地址随机化。随机化时还需要区分解释器或者其他普通so文件，对于解释器，为避免程序发生冲突，程序固定从ELF_ET_DYN_BASE开始计算偏移进行加载。一切就绪后，通过elf_map函数建立用户空间虚拟地址空间与目标映像文件中段的映射</p></li><li><p>装载程序入口地址：对于需要解释器的程序，需要先通过<code>load_elf_interp</code>函数装入解释器的映像，并将程序入口点设置为解释器的入口地址，对于不需要解释器的文件，直接读取elf_header中的入口点虚拟地址即可</p></li><li><p>添加参数和环境变量等配置信息：一切就绪后，通过<code>start_thread</code>进入新的程序入口</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">load_elf_binary</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> linux_binprm *bprm)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">interpreter</span> =</span> <span class="hljs-literal">NULL</span>; <span class="hljs-comment">/* to shut gcc up */</span><br> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> load_addr = <span class="hljs-number">0</span>, load_bias = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> load_addr_set = <span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> * elf_interpreter = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> error;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">elf_phdr</span> *<span class="hljs-title">elf_ppnt</span>, *<span class="hljs-title">elf_phdata</span>, *<span class="hljs-title">interp_elf_phdata</span> =</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> elf_bss, elf_brk;<br><span class="hljs-type">int</span> retval, i;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> elf_entry;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> interp_load_addr = <span class="hljs-number">0</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> start_code, end_code, start_data, end_data;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> reloc_func_desc __maybe_unused = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> executable_stack = EXSTACK_DEFAULT;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pt_regs</span> *<span class="hljs-title">regs</span> =</span> current_pt_regs();<br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">elfhdr</span> <span class="hljs-title">elf_ex</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">elfhdr</span> <span class="hljs-title">interp_elf_ex</span>;</span><br>&#125; *loc;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">arch_elf_state</span> <span class="hljs-title">arch_state</span> =</span> INIT_ARCH_ELF_STATE;<br><br>loc = kmalloc(<span class="hljs-keyword">sizeof</span>(*loc), GFP_KERNEL);<br><span class="hljs-keyword">if</span> (!loc) &#123;<br>retval = -ENOMEM;<br><span class="hljs-keyword">goto</span> out_ret;<br>&#125;<br><br><span class="hljs-comment">/* Get the exec-header */</span><br>loc-&gt;elf_ex = *((<span class="hljs-keyword">struct</span> elfhdr *)bprm-&gt;buf);<br><br>retval = -ENOEXEC;<br><span class="hljs-comment">/* First of all, some simple consistency checks */</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">memcmp</span>(loc-&gt;elf_ex.e_ident, ELFMAG, SELFMAG) != <span class="hljs-number">0</span>)<br><span class="hljs-keyword">goto</span> out;<br><br><span class="hljs-keyword">if</span> (loc-&gt;elf_ex.e_type != ET_EXEC &amp;&amp; loc-&gt;elf_ex.e_type != ET_DYN)<br><span class="hljs-keyword">goto</span> out;<br><span class="hljs-keyword">if</span> (!elf_check_arch(&amp;loc-&gt;elf_ex))<br><span class="hljs-keyword">goto</span> out;<br><span class="hljs-keyword">if</span> (!bprm-&gt;file-&gt;f_op-&gt;mmap)<br><span class="hljs-keyword">goto</span> out;<br><br>elf_phdata = load_elf_phdrs(&amp;loc-&gt;elf_ex, bprm-&gt;file);<br><span class="hljs-keyword">if</span> (!elf_phdata)<br><span class="hljs-keyword">goto</span> out;<br><br>elf_ppnt = elf_phdata;<br>elf_bss = <span class="hljs-number">0</span>;<br>elf_brk = <span class="hljs-number">0</span>;<br><br>start_code = ~<span class="hljs-number">0UL</span>;<br>end_code = <span class="hljs-number">0</span>;<br>start_data = <span class="hljs-number">0</span>;<br>end_data = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; loc-&gt;elf_ex.e_phnum; i++) &#123;<br><span class="hljs-keyword">if</span> (elf_ppnt-&gt;p_type == PT_INTERP) &#123;<br><span class="hljs-comment">/* This is the program interpreter used for</span><br><span class="hljs-comment"> * shared libraries - for now assume that this</span><br><span class="hljs-comment"> * is an a.out format binary</span><br><span class="hljs-comment"> */</span><br>retval = -ENOEXEC;<br><span class="hljs-keyword">if</span> (elf_ppnt-&gt;p_filesz &gt; PATH_MAX || <br>    elf_ppnt-&gt;p_filesz &lt; <span class="hljs-number">2</span>)<br><span class="hljs-keyword">goto</span> out_free_ph;<br><br>retval = -ENOMEM;<br>elf_interpreter = kmalloc(elf_ppnt-&gt;p_filesz,<br>  GFP_KERNEL);<br><span class="hljs-keyword">if</span> (!elf_interpreter)<br><span class="hljs-keyword">goto</span> out_free_ph;<br><br>retval = kernel_read(bprm-&gt;file, elf_ppnt-&gt;p_offset,<br>     elf_interpreter,<br>     elf_ppnt-&gt;p_filesz);<br><span class="hljs-keyword">if</span> (retval != elf_ppnt-&gt;p_filesz) &#123;<br><span class="hljs-keyword">if</span> (retval &gt;= <span class="hljs-number">0</span>)<br>retval = -EIO;<br><span class="hljs-keyword">goto</span> out_free_interp;<br>&#125;<br><span class="hljs-comment">/* make sure path is NULL terminated */</span><br>retval = -ENOEXEC;<br><span class="hljs-keyword">if</span> (elf_interpreter[elf_ppnt-&gt;p_filesz - <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;\0&#x27;</span>)<br><span class="hljs-keyword">goto</span> out_free_interp;<br><br>interpreter = open_exec(elf_interpreter);<br>retval = PTR_ERR(interpreter);<br><span class="hljs-keyword">if</span> (IS_ERR(interpreter))<br><span class="hljs-keyword">goto</span> out_free_interp;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If the binary is not readable then enforce</span><br><span class="hljs-comment"> * mm-&gt;dumpable = 0 regardless of the interpreter&#x27;s</span><br><span class="hljs-comment"> * permissions.</span><br><span class="hljs-comment"> */</span><br>would_dump(bprm, interpreter);<br><br>retval = kernel_read(interpreter, <span class="hljs-number">0</span>, bprm-&gt;buf,<br>     BINPRM_BUF_SIZE);<br><span class="hljs-keyword">if</span> (retval != BINPRM_BUF_SIZE) &#123;<br><span class="hljs-keyword">if</span> (retval &gt;= <span class="hljs-number">0</span>)<br>retval = -EIO;<br><span class="hljs-keyword">goto</span> out_free_dentry;<br>&#125;<br><br><span class="hljs-comment">/* Get the exec headers */</span><br>loc-&gt;interp_elf_ex = *((<span class="hljs-keyword">struct</span> elfhdr *)bprm-&gt;buf);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>elf_ppnt++;<br>&#125;<br><br>elf_ppnt = elf_phdata;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; loc-&gt;elf_ex.e_phnum; i++, elf_ppnt++)<br><span class="hljs-keyword">switch</span> (elf_ppnt-&gt;p_type) &#123;<br><span class="hljs-keyword">case</span> PT_GNU_STACK:<br><span class="hljs-keyword">if</span> (elf_ppnt-&gt;p_flags &amp; PF_X)<br>executable_stack = EXSTACK_ENABLE_X;<br><span class="hljs-keyword">else</span><br>executable_stack = EXSTACK_DISABLE_X;<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> PT_LOPROC ... PT_HIPROC:<br>retval = arch_elf_pt_proc(&amp;loc-&gt;elf_ex, elf_ppnt,<br>  bprm-&gt;file, <span class="hljs-literal">false</span>,<br>  &amp;arch_state);<br><span class="hljs-keyword">if</span> (retval)<br><span class="hljs-keyword">goto</span> out_free_dentry;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-comment">/* Some simple consistency checks for the interpreter */</span><br><span class="hljs-keyword">if</span> (elf_interpreter) &#123;<br>retval = -ELIBBAD;<br><span class="hljs-comment">/* Not an ELF interpreter */</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">memcmp</span>(loc-&gt;interp_elf_ex.e_ident, ELFMAG, SELFMAG) != <span class="hljs-number">0</span>)<br><span class="hljs-keyword">goto</span> out_free_dentry;<br><span class="hljs-comment">/* Verify the interpreter has a valid arch */</span><br><span class="hljs-keyword">if</span> (!elf_check_arch(&amp;loc-&gt;interp_elf_ex))<br><span class="hljs-keyword">goto</span> out_free_dentry;<br><br><span class="hljs-comment">/* Load the interpreter program headers */</span><br>interp_elf_phdata = load_elf_phdrs(&amp;loc-&gt;interp_elf_ex,<br>   interpreter);<br><span class="hljs-keyword">if</span> (!interp_elf_phdata)<br><span class="hljs-keyword">goto</span> out_free_dentry;<br><br><span class="hljs-comment">/* Pass PT_LOPROC..PT_HIPROC headers to arch code */</span><br>elf_ppnt = interp_elf_phdata;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; loc-&gt;interp_elf_ex.e_phnum; i++, elf_ppnt++)<br><span class="hljs-keyword">switch</span> (elf_ppnt-&gt;p_type) &#123;<br><span class="hljs-keyword">case</span> PT_LOPROC ... PT_HIPROC:<br>retval = arch_elf_pt_proc(&amp;loc-&gt;interp_elf_ex,<br>  elf_ppnt, interpreter,<br>  <span class="hljs-literal">true</span>, &amp;arch_state);<br><span class="hljs-keyword">if</span> (retval)<br><span class="hljs-keyword">goto</span> out_free_dentry;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Allow arch code to reject the ELF at this point, whilst it&#x27;s</span><br><span class="hljs-comment"> * still possible to return an error to the code that invoked</span><br><span class="hljs-comment"> * the exec syscall.</span><br><span class="hljs-comment"> */</span><br>retval = arch_check_elf(&amp;loc-&gt;elf_ex, !!interpreter, &amp;arch_state);<br><span class="hljs-keyword">if</span> (retval)<br><span class="hljs-keyword">goto</span> out_free_dentry;<br><br><span class="hljs-comment">/* Flush all traces of the currently running executable */</span><br>retval = flush_old_exec(bprm);<br><span class="hljs-keyword">if</span> (retval)<br><span class="hljs-keyword">goto</span> out_free_dentry;<br><br><span class="hljs-comment">/* Do this immediately, since STACK_TOP as used in setup_arg_pages</span><br><span class="hljs-comment">   may depend on the personality.  */</span><br>SET_PERSONALITY2(loc-&gt;elf_ex, &amp;arch_state);<br><span class="hljs-keyword">if</span> (elf_read_implies_exec(loc-&gt;elf_ex, executable_stack))<br>current-&gt;personality |= READ_IMPLIES_EXEC;<br><br><span class="hljs-keyword">if</span> (!(current-&gt;personality &amp; ADDR_NO_RANDOMIZE) &amp;&amp; randomize_va_space)<br>current-&gt;flags |= PF_RANDOMIZE;<br><br>setup_new_exec(bprm);<br><br><span class="hljs-comment">/* Do this so that we can load the interpreter, if need be.  We will</span><br><span class="hljs-comment">   change some of these later */</span><br>retval = setup_arg_pages(bprm, randomize_stack_top(STACK_TOP),<br> executable_stack);<br><span class="hljs-keyword">if</span> (retval &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">goto</span> out_free_dentry;<br><br>current-&gt;mm-&gt;start_stack = bprm-&gt;p;<br><br><span class="hljs-comment">/* Now we do a little grungy work by mmapping the ELF image into</span><br><span class="hljs-comment">   the correct location in memory. */</span><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>, elf_ppnt = elf_phdata;<br>    i &lt; loc-&gt;elf_ex.e_phnum; i++, elf_ppnt++) &#123;<br><span class="hljs-type">int</span> elf_prot = <span class="hljs-number">0</span>, elf_flags;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> k, vaddr;<br><br><span class="hljs-keyword">if</span> (elf_ppnt-&gt;p_type != PT_LOAD)<br><span class="hljs-keyword">continue</span>;<br><br><span class="hljs-keyword">if</span> (unlikely (elf_brk &gt; elf_bss)) &#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> nbyte;<br>            <br><span class="hljs-comment">/* There was a PT_LOAD segment with p_memsz &gt; p_filesz</span><br><span class="hljs-comment">   before this one. Map anonymous pages, if needed,</span><br><span class="hljs-comment">   and clear the area.  */</span><br>retval = set_brk(elf_bss + load_bias,<br> elf_brk + load_bias);<br><span class="hljs-keyword">if</span> (retval)<br><span class="hljs-keyword">goto</span> out_free_dentry;<br>nbyte = ELF_PAGEOFFSET(elf_bss);<br><span class="hljs-keyword">if</span> (nbyte) &#123;<br>nbyte = ELF_MIN_ALIGN - nbyte;<br><span class="hljs-keyword">if</span> (nbyte &gt; elf_brk - elf_bss)<br>nbyte = elf_brk - elf_bss;<br><span class="hljs-keyword">if</span> (clear_user((<span class="hljs-type">void</span> __user *)elf_bss +<br>load_bias, nbyte)) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * This bss-zeroing can fail if the ELF</span><br><span class="hljs-comment"> * file specifies odd protections. So</span><br><span class="hljs-comment"> * we don&#x27;t check the return value</span><br><span class="hljs-comment"> */</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (elf_ppnt-&gt;p_flags &amp; PF_R)<br>elf_prot |= PROT_READ;<br><span class="hljs-keyword">if</span> (elf_ppnt-&gt;p_flags &amp; PF_W)<br>elf_prot |= PROT_WRITE;<br><span class="hljs-keyword">if</span> (elf_ppnt-&gt;p_flags &amp; PF_X)<br>elf_prot |= PROT_EXEC;<br><br>elf_flags = MAP_PRIVATE | MAP_DENYWRITE | MAP_EXECUTABLE;<br><br>vaddr = elf_ppnt-&gt;p_vaddr;<br><span class="hljs-keyword">if</span> (loc-&gt;elf_ex.e_type == ET_EXEC || load_addr_set) &#123;<br>elf_flags |= MAP_FIXED;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (loc-&gt;elf_ex.e_type == ET_DYN) &#123;<br><span class="hljs-comment">/* Try and get dynamic programs out of the way of the</span><br><span class="hljs-comment"> * default mmap base, as well as whatever program they</span><br><span class="hljs-comment"> * might try to exec.  This is because the brk will</span><br><span class="hljs-comment"> * follow the loader, and is not movable.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_ARCH_BINFMT_ELF_RANDOMIZE_PIE</span><br><span class="hljs-comment">/* Memory randomization might have been switched off</span><br><span class="hljs-comment"> * in runtime via sysctl or explicit setting of</span><br><span class="hljs-comment"> * personality flags.</span><br><span class="hljs-comment"> * If that is the case, retain the original non-zero</span><br><span class="hljs-comment"> * load_bias value in order to establish proper</span><br><span class="hljs-comment"> * non-randomized mappings.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (current-&gt;flags &amp; PF_RANDOMIZE)<br>load_bias = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span><br>load_bias = ELF_PAGESTART(ELF_ET_DYN_BASE - vaddr);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>load_bias = ELF_PAGESTART(ELF_ET_DYN_BASE - vaddr);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><br>error = elf_map(bprm-&gt;file, load_bias + vaddr, elf_ppnt,<br>elf_prot, elf_flags, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (BAD_ADDR(error)) &#123;<br>retval = IS_ERR((<span class="hljs-type">void</span> *)error) ?<br>PTR_ERR((<span class="hljs-type">void</span>*)error) : -EINVAL;<br><span class="hljs-keyword">goto</span> out_free_dentry;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!load_addr_set) &#123;<br>load_addr_set = <span class="hljs-number">1</span>;<br>load_addr = (elf_ppnt-&gt;p_vaddr - elf_ppnt-&gt;p_offset);<br><span class="hljs-keyword">if</span> (loc-&gt;elf_ex.e_type == ET_DYN) &#123;<br>load_bias += error -<br>             ELF_PAGESTART(load_bias + vaddr);<br>load_addr += load_bias;<br>reloc_func_desc = load_bias;<br>&#125;<br>&#125;<br>k = elf_ppnt-&gt;p_vaddr;<br><span class="hljs-keyword">if</span> (k &lt; start_code)<br>start_code = k;<br><span class="hljs-keyword">if</span> (start_data &lt; k)<br>start_data = k;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Check to see if the section&#x27;s size will overflow the</span><br><span class="hljs-comment"> * allowed task size. Note that p_filesz must always be</span><br><span class="hljs-comment"> * &lt;= p_memsz so it is only necessary to check p_memsz.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (BAD_ADDR(k) || elf_ppnt-&gt;p_filesz &gt; elf_ppnt-&gt;p_memsz ||<br>    elf_ppnt-&gt;p_memsz &gt; TASK_SIZE ||<br>    TASK_SIZE - elf_ppnt-&gt;p_memsz &lt; k) &#123;<br><span class="hljs-comment">/* set_brk can never work. Avoid overflows. */</span><br>retval = -EINVAL;<br><span class="hljs-keyword">goto</span> out_free_dentry;<br>&#125;<br><br>k = elf_ppnt-&gt;p_vaddr + elf_ppnt-&gt;p_filesz;<br><br><span class="hljs-keyword">if</span> (k &gt; elf_bss)<br>elf_bss = k;<br><span class="hljs-keyword">if</span> ((elf_ppnt-&gt;p_flags &amp; PF_X) &amp;&amp; end_code &lt; k)<br>end_code = k;<br><span class="hljs-keyword">if</span> (end_data &lt; k)<br>end_data = k;<br>k = elf_ppnt-&gt;p_vaddr + elf_ppnt-&gt;p_memsz;<br><span class="hljs-keyword">if</span> (k &gt; elf_brk)<br>elf_brk = k;<br>&#125;<br><br>loc-&gt;elf_ex.e_entry += load_bias;<br>elf_bss += load_bias;<br>elf_brk += load_bias;<br>start_code += load_bias;<br>end_code += load_bias;<br>start_data += load_bias;<br>end_data += load_bias;<br><br><span class="hljs-comment">/* Calling set_brk effectively mmaps the pages that we need</span><br><span class="hljs-comment"> * for the bss and break sections.  We must do this before</span><br><span class="hljs-comment"> * mapping in the interpreter, to make sure it doesn&#x27;t wind</span><br><span class="hljs-comment"> * up getting placed where the bss needs to go.</span><br><span class="hljs-comment"> */</span><br>retval = set_brk(elf_bss, elf_brk);<br><span class="hljs-keyword">if</span> (retval)<br><span class="hljs-keyword">goto</span> out_free_dentry;<br><span class="hljs-keyword">if</span> (likely(elf_bss != elf_brk) &amp;&amp; unlikely(padzero(elf_bss))) &#123;<br>retval = -EFAULT; <span class="hljs-comment">/* Nobody gets to see this, but.. */</span><br><span class="hljs-keyword">goto</span> out_free_dentry;<br>&#125;<br><br><span class="hljs-keyword">if</span> (elf_interpreter) &#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> interp_map_addr = <span class="hljs-number">0</span>;<br><br>elf_entry = load_elf_interp(&amp;loc-&gt;interp_elf_ex,<br>    interpreter,<br>    &amp;interp_map_addr,<br>    load_bias, interp_elf_phdata);<br><span class="hljs-keyword">if</span> (!IS_ERR((<span class="hljs-type">void</span> *)elf_entry)) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * load_elf_interp() returns relocation</span><br><span class="hljs-comment"> * adjustment</span><br><span class="hljs-comment"> */</span><br>interp_load_addr = elf_entry;<br>elf_entry += loc-&gt;interp_elf_ex.e_entry;<br>&#125;<br><span class="hljs-keyword">if</span> (BAD_ADDR(elf_entry)) &#123;<br>retval = IS_ERR((<span class="hljs-type">void</span> *)elf_entry) ?<br>(<span class="hljs-type">int</span>)elf_entry : -EINVAL;<br><span class="hljs-keyword">goto</span> out_free_dentry;<br>&#125;<br>reloc_func_desc = interp_load_addr;<br><br>allow_write_access(interpreter);<br>fput(interpreter);<br>kfree(elf_interpreter);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>elf_entry = loc-&gt;elf_ex.e_entry;<br><span class="hljs-keyword">if</span> (BAD_ADDR(elf_entry)) &#123;<br>retval = -EINVAL;<br><span class="hljs-keyword">goto</span> out_free_dentry;<br>&#125;<br>&#125;<br><br>kfree(interp_elf_phdata);<br>kfree(elf_phdata);<br><br>set_binfmt(&amp;elf_format);<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> ARCH_HAS_SETUP_ADDITIONAL_PAGES</span><br>retval = arch_setup_additional_pages(bprm, !!elf_interpreter);<br><span class="hljs-keyword">if</span> (retval &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">goto</span> out;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* ARCH_HAS_SETUP_ADDITIONAL_PAGES */</span></span><br><br>install_exec_creds(bprm);<br>retval = create_elf_tables(bprm, &amp;loc-&gt;elf_ex,<br>  load_addr, interp_load_addr);<br><span class="hljs-keyword">if</span> (retval &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">goto</span> out;<br><span class="hljs-comment">/* N.B. passed_fileno might not be initialized? */</span><br>current-&gt;mm-&gt;end_code = end_code;<br>current-&gt;mm-&gt;start_code = start_code;<br>current-&gt;mm-&gt;start_data = start_data;<br>current-&gt;mm-&gt;end_data = end_data;<br>current-&gt;mm-&gt;start_stack = bprm-&gt;p;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> arch_randomize_brk</span><br><span class="hljs-keyword">if</span> ((current-&gt;flags &amp; PF_RANDOMIZE) &amp;&amp; (randomize_va_space &gt; <span class="hljs-number">1</span>)) &#123;<br>current-&gt;mm-&gt;brk = current-&gt;mm-&gt;start_brk =<br>arch_randomize_brk(current-&gt;mm);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_COMPAT_BRK</span><br>current-&gt;brk_randomized = <span class="hljs-number">1</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-keyword">if</span> (current-&gt;personality &amp; MMAP_PAGE_ZERO) &#123;<br><span class="hljs-comment">/* Why this, you ask???  Well SVr4 maps page 0 as read-only,</span><br><span class="hljs-comment">   and some applications &quot;depend&quot; upon this behavior.</span><br><span class="hljs-comment">   Since we do not have the power to recompile these, we</span><br><span class="hljs-comment">   emulate the SVr4 behavior. Sigh. */</span><br>error = vm_mmap(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, PAGE_SIZE, PROT_READ | PROT_EXEC,<br>MAP_FIXED | MAP_PRIVATE, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> ELF_PLAT_INIT</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * The ABI may specify that certain registers be set up in special</span><br><span class="hljs-comment"> * ways (on i386 %edx is the address of a DT_FINI function, for</span><br><span class="hljs-comment"> * example.  In addition, it may also specify (eg, PowerPC64 ELF)</span><br><span class="hljs-comment"> * that the e_entry field is the address of the function descriptor</span><br><span class="hljs-comment"> * for the startup routine, rather than the address of the startup</span><br><span class="hljs-comment"> * routine itself.  This macro performs whatever initialization to</span><br><span class="hljs-comment"> * the regs structure is required as well as any relocations to the</span><br><span class="hljs-comment"> * function descriptor entries when executing dynamically links apps.</span><br><span class="hljs-comment"> */</span><br>ELF_PLAT_INIT(regs, reloc_func_desc);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>start_thread(regs, elf_entry, bprm-&gt;p);<br>retval = <span class="hljs-number">0</span>;<br>out:<br>kfree(loc);<br>out_ret:<br><span class="hljs-keyword">return</span> retval;<br><br><span class="hljs-comment">/* error cleanup */</span><br>out_free_dentry:<br>kfree(interp_elf_phdata);<br>allow_write_access(interpreter);<br><span class="hljs-keyword">if</span> (interpreter)<br>fput(interpreter);<br>out_free_interp:<br>kfree(elf_interpreter);<br>out_free_ph:<br>kfree(elf_phdata);<br><span class="hljs-keyword">goto</span> out;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="start-thread"><a href="#start-thread" class="headerlink" title="start thread"></a>start thread</h3><p>这里把新程序的pc和sp存入堆栈，覆盖掉了之前的pc、sp。在此之后，execve返回，便从载入程序中的main开始执行了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">start_thread</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> pt_regs *regs, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> pc,<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> sp)</span><br>&#123;<br>start_thread_common(regs, pc);<br>regs-&gt;pstate = PSR_MODE_EL0t;<br>regs-&gt;sp = sp;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">start_thread_common</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> pt_regs *regs, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> pc)</span><br>&#123;<br><span class="hljs-built_in">memset</span>(regs, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(*regs));<br>forget_syscall(regs);<br>regs-&gt;pc = pc;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="ld"><a href="#ld" class="headerlink" title="ld"></a>ld</h1><h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><p><code>ld</code>的<code>start</code>会调用<code>_dl_start</code>，最后跳转到主程序入口点</p><h2 id="dl-start"><a href="#dl-start" class="headerlink" title="_dl_start"></a>_dl_start</h2><ol><li>对<code>ld</code>本身进行重定位</li><li>调用<code>__rtld_malloc_init_stubs</code>初始化一个简单的<code>malloc</code>实现</li><li>调用<code>_dl_start_final</code>进行进一步的初始化</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Addr)</span> _<span class="hljs-title function_">dl_start</span> <span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br>  rtld_timer_start (&amp;start_time);<br>  <br>  <span class="hljs-comment">/* Figure out the run-time load address of the dynamic linker itself.  */</span><br>  bootstrap_map.l_addr = elf_machine_load_address ();<br><br>  <span class="hljs-comment">/* Read our own dynamic section and fill in the info array.  */</span><br>  bootstrap_map.l_ld = (<span class="hljs-type">void</span> *) bootstrap_map.l_addr + elf_machine_dynamic ();<br>  bootstrap_map.l_ld_readonly = DL_RO_DYN_SECTION;<br>  elf_get_dynamic_info (&amp;bootstrap_map, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br>  <br>  <span class="hljs-keyword">if</span> (bootstrap_map.l_addr)<br>    &#123;<br>      <span class="hljs-comment">/* Relocate ourselves so we can do normal function calls and</span><br><span class="hljs-comment"> data access using the global offset table.  */</span><br><br>      ELF_DYNAMIC_RELOCATE (&amp;bootstrap_map, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>  bootstrap_map.l_relocated = <span class="hljs-number">1</span>;<br><br>  <span class="hljs-comment">/* Please note that we don&#x27;t allow profiling of this object and</span><br><span class="hljs-comment">     therefore need not test whether we have to allocate the array</span><br><span class="hljs-comment">     for the relocation results (as done in dl-reloc.c).  */</span><br><br>  <span class="hljs-comment">/* Now life is sane; we can call functions and access global data.</span><br><span class="hljs-comment">     Set up to use the operating system facilities, and find out from</span><br><span class="hljs-comment">     the operating system&#x27;s program loader where to find the program</span><br><span class="hljs-comment">     header table in core.  Put the rest of _dl_start into a separate</span><br><span class="hljs-comment">     function, that way the compiler cannot put accesses to the GOT</span><br><span class="hljs-comment">     before ELF_DYNAMIC_RELOCATE.  */</span><br><br>  __rtld_malloc_init_stubs ();<br>    <br>  <span class="hljs-keyword">return</span> _dl_start_final (arg);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="dl-start-final"><a href="#dl-start-final" class="headerlink" title="_dl_start_final"></a>_dl_start_final</h3><ol><li>初始化<code>ld</code>链接器的全局状态</li><li>初始化栈最高地址</li><li>调用<code>_dl_sysdep_start</code>进行初始化</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Addr)</span> _<span class="hljs-title function_">dl_start_final</span> <span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br>  ElfW(Addr) start_addr;<br><br>  <span class="hljs-comment">/* Do not use an initializer for these members because it would</span><br><span class="hljs-comment">     interfere with __rtld_static_init.  */</span><br>  GLRO (dl_find_object) = &amp;_dl_find_object;<br><br>  <span class="hljs-comment">/* If it hasn&#x27;t happen yet record the startup time.  */</span><br>  rtld_timer_start (&amp;start_time);<br>  _dl_setup_hash (&amp;GL(dl_rtld_map));<br>  GL(dl_rtld_map).l_real = &amp;GL(dl_rtld_map);<br>  GL(dl_rtld_map).l_map_start = (ElfW(Addr)) &amp;__ehdr_start;<br>  GL(dl_rtld_map).l_map_end = (ElfW(Addr)) _end;<br>  <br>  <span class="hljs-comment">/* Initialize the stack end variable.  */</span><br>  __libc_stack_end = __builtin_frame_address (<span class="hljs-number">0</span>);<br><br>  <span class="hljs-comment">/* Call the OS-dependent function to set up life so we can do things like</span><br><span class="hljs-comment">     file access.  It will call `dl_main&#x27; (below) to do all the real work</span><br><span class="hljs-comment">     of the dynamic linker, and then unwind our frame and run the user</span><br><span class="hljs-comment">     entry point on the same stack we entered on.  */</span><br>  start_addr = _dl_sysdep_start (arg, &amp;dl_main);<br><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (GLRO(dl_debug_mask) &amp; DL_DEBUG_STATISTICS))<br>    &#123;<br>      RTLD_TIMING_VAR (rtld_total_time);<br>      rtld_timer_stop (&amp;rtld_total_time, start_time);<br>      print_statistics (RTLD_TIMING_REF(rtld_total_time));<br>    &#125;<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> ELF_MACHINE_START_ADDRESS(map, start) (start)</span><br>   <span class="hljs-keyword">return</span> ELF_MACHINE_START_ADDRESS (GL(dl_ns)[LM_ID_BASE]._ns_loaded, start_addr);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="dl-sysdep-start"><a href="#dl-sysdep-start" class="headerlink" title="_dl_sysdep_start"></a>_dl_sysdep_start</h3><ol><li>调用<code>_dl_sysdep_parse_arguments</code>解析动态链接相关命令行参数及环境变量</li><li>使用<code>dl_hwcap_check</code>检查硬件属性</li><li>通过<code> __tunables_init</code>解析可调参数</li><li>使用<code>_dl_sort_maps_init</code>初始化内存映射表</li><li>使用<code>brk</code>分配堆内存</li><li>调用<code>__libc_check_standard_fds</code>来确保<code>0</code>、<code>1</code>、<code>2</code>三个文件描述符的开启</li><li>调用<code>_dl_main</code>进行对主程序依赖库和<code>preload</code>包含内容进行装载和重定位</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c">ElfW(Addr) _dl_sysdep_start (<span class="hljs-type">void</span> **start_argptr,<br>  <span class="hljs-type">void</span> (*dl_main) (<span class="hljs-type">const</span> ElfW(Phdr) *phdr, ElfW(Word) phnum,<br>   ElfW(Addr) *user_entry, ElfW(<span class="hljs-type">auxv_t</span>) *auxv))<br>&#123;<br>  __libc_stack_end = DL_STACK_END (start_argptr);<br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dl_main_arguments</span> <span class="hljs-title">dl_main_args</span>;</span><br>  _dl_sysdep_parse_arguments (start_argptr, &amp;dl_main_args);<br><br>  dl_hwcap_check ();<br><br>  __tunables_init (_environ);<br><br>  <span class="hljs-comment">/* Initialize DSO sorting algorithm after tunables.  */</span><br>  _dl_sort_maps_init ();<br><br>  __brk (<span class="hljs-number">0</span>);<span class="hljs-comment">/* Initialize the break.  */</span><br><br>  <span class="hljs-comment">/* Determine the length of the platform name.  */</span><br>  <span class="hljs-keyword">if</span> (GLRO(dl_platform) != <span class="hljs-literal">NULL</span>)<br>    GLRO(dl_platformlen) = <span class="hljs-built_in">strlen</span> (GLRO(dl_platform));<br><br>  <span class="hljs-keyword">if</span> (__sbrk (<span class="hljs-number">0</span>) == _end)<br>    <span class="hljs-comment">/* The dynamic linker was run as a program, and so the initial break</span><br><span class="hljs-comment">       starts just after our bss, at &amp;_end.  The malloc in dl-minimal.c</span><br><span class="hljs-comment">       will consume the rest of this page, so tell the kernel to move the</span><br><span class="hljs-comment">       break up that far.  When the user program examines its break, it</span><br><span class="hljs-comment">       will see this new value and not clobber our data.  */</span><br>    __sbrk (GLRO(dl_pagesize)<br>    - (((<span class="hljs-type">uintptr_t</span>) _end) &amp; (GLRO(dl_pagesize) - <span class="hljs-number">1</span>)));<br><br>  <span class="hljs-comment">/* If this is a SUID program we make sure that FDs 0, 1, and 2 are</span><br><span class="hljs-comment">     allocated.  If necessary we are doing it ourself.  If it is not</span><br><span class="hljs-comment">     possible we stop the program.  */</span><br>  <span class="hljs-keyword">if</span> (__builtin_expect (__libc_enable_secure, <span class="hljs-number">0</span>))<br>    __libc_check_standard_fds ();<br><br>  (*dl_main) (dl_main_args.phdr, dl_main_args.phnum,<br>              &amp;dl_main_args.user_entry, GLRO(dl_auxv));<br>  <span class="hljs-keyword">return</span> dl_main_args.user_entry;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="dl-main"><a href="#dl-main" class="headerlink" title="dl_main"></a>dl_main</h2><ol><li>对<code>dl_main</code>进行初始化、进行<code>tls</code>预初始化并处理环境变量</li><li>解析直接运行<code>ld</code>时的命令行参数</li><li>初始化<code>主程序</code>的<code>linkmap</code></li><li>将主程序<code>.dynamic</code>节内容放入<code>main_map</code>(<code>main linkmap</code>)</li><li>初始化<code>vsdo</code>及其函数指针</li><li>通过<code>call_init_paths</code>初始化动态库路径，例如<code>RPATH</code></li><li>初始化<code>TLS</code></li><li>解析<code>preload</code>相关的命令行参数、环境变量和文件</li><li>加载<code>主程序</code>的所有依赖库及<code>preload</code>的所有动态库，依此放到<code>link_map</code>链表中</li><li>对所有已加载对象进行重定位</li><li>对<code>glibc</code>进行早期初始化</li><li>做清尾工作</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">dl_main</span> <span class="hljs-params">(<span class="hljs-type">const</span> ElfW(Phdr) *phdr,</span><br><span class="hljs-params">                     ElfW(Word) phnum,</span><br><span class="hljs-params">                     ElfW(Addr) *user_entry,</span><br><span class="hljs-params">                     ElfW(<span class="hljs-type">auxv_t</span>) *auxv)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">main_map</span>;</span><br>    <span class="hljs-type">size_t</span> file_size;<br>    <span class="hljs-type">char</span> *file;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">bool</span> rtld_is_main = <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">void</span> *tcbp = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dl_main_state</span> <span class="hljs-title">state</span>;</span><br>    dl_main_state_init (&amp;state);<br><br>    __tls_pre_init_tp ();<br><br>    <span class="hljs-comment">/* The explicit initialization here is cheaper than processing the reloc</span><br><span class="hljs-comment">     in the _rtld_local definition&#x27;s initializer.  */</span><br>    GL(dl_make_stack_executable_hook) = &amp;_dl_make_stack_executable;<br><br>    <span class="hljs-comment">/* Process the environment variable which control the behaviour.  */</span><br>    process_envvars (&amp;state);<br><br>    <span class="hljs-comment">/* Set up a flag which tells we are just starting.  */</span><br>    _dl_starting_up = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *ld_so_name = _dl_argv[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span> (*user_entry == (ElfW(Addr)) ENTRY_POINT)<br>    &#123;<br>        <span class="hljs-comment">/* Ho ho.  We are not the program interpreter!  We are the program</span><br><span class="hljs-comment"> itself!  This means someone ran ld.so as a command.  Well, that</span><br><span class="hljs-comment"> might be convenient to do sometimes.  We support it by</span><br><span class="hljs-comment"> interpreting the args like this:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> ld.so PROGRAM ARGS...</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> The first argument is the name of a file containing an ELF</span><br><span class="hljs-comment"> executable we will load and run with the following arguments.</span><br><span class="hljs-comment"> To simplify life here, PROGRAM is searched for using the</span><br><span class="hljs-comment"> normal rules for shared objects, rather than $PATH or anything</span><br><span class="hljs-comment"> like that.  We just load it and use its entry point; we don&#x27;t</span><br><span class="hljs-comment"> pay attention to its PT_INTERP command (we are the interpreter</span><br><span class="hljs-comment"> ourselves).  This is an easy way to test a new ld.so before</span><br><span class="hljs-comment"> installing it.  */</span><br>        rtld_is_main = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-type">char</span> *argv0 = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-type">char</span> **orig_argv = _dl_argv;<br><br>        <span class="hljs-comment">/* Note the place where the dynamic linker actually came from.  */</span><br>        GL(dl_rtld_map).l_name = rtld_progname;<br><br>        <span class="hljs-keyword">while</span> (_dl_argc &gt; <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> (! <span class="hljs-built_in">strcmp</span> (_dl_argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;--list&quot;</span>))<br>            &#123;<br>                <span class="hljs-keyword">if</span> (state.mode != rtld_mode_help)<br>                &#123;<br>                    state.mode = rtld_mode_list;<br>                    <span class="hljs-comment">/* This means do no dependency analysis.  */</span><br>                    GLRO(dl_lazy) = <span class="hljs-number">-1</span>;<br>                &#125;<br><br>                --_dl_argc;<br>                ++_dl_argv;<br>            &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (! <span class="hljs-built_in">strcmp</span> (_dl_argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;--verify&quot;</span>))<br>        &#123;<br>            <span class="hljs-keyword">if</span> (state.mode != rtld_mode_help)<br>                state.mode = rtld_mode_verify;<br><br>            --_dl_argc;<br>            ++_dl_argv;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (! <span class="hljs-built_in">strcmp</span> (_dl_argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;--inhibit-cache&quot;</span>))<br>        &#123;<br>            GLRO(dl_inhibit_cache) = <span class="hljs-number">1</span>;<br>            --_dl_argc;<br>            ++_dl_argv;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (! <span class="hljs-built_in">strcmp</span> (_dl_argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;--library-path&quot;</span>)<br>                 &amp;&amp; _dl_argc &gt; <span class="hljs-number">2</span>)<br>        &#123;<br>            state.library_path = _dl_argv[<span class="hljs-number">2</span>];<br>            state.library_path_source = <span class="hljs-string">&quot;--library-path&quot;</span>;<br><br>            _dl_argc -= <span class="hljs-number">2</span>;<br>            _dl_argv += <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (! <span class="hljs-built_in">strcmp</span> (_dl_argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;--inhibit-rpath&quot;</span>)<br>                 &amp;&amp; _dl_argc &gt; <span class="hljs-number">2</span>)<br>        &#123;<br>            GLRO(dl_inhibit_rpath) = _dl_argv[<span class="hljs-number">2</span>];<br><br>            _dl_argc -= <span class="hljs-number">2</span>;<br>            _dl_argv += <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (! <span class="hljs-built_in">strcmp</span> (_dl_argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;--audit&quot;</span>) &amp;&amp; _dl_argc &gt; <span class="hljs-number">2</span>)<br>        &#123;<br>            audit_list_add_string (&amp;state.audit_list, _dl_argv[<span class="hljs-number">2</span>]);<br><br>            _dl_argc -= <span class="hljs-number">2</span>;<br>            _dl_argv += <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (! <span class="hljs-built_in">strcmp</span> (_dl_argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;--preload&quot;</span>) &amp;&amp; _dl_argc &gt; <span class="hljs-number">2</span>)<br>        &#123;<br>            state.preloadarg = _dl_argv[<span class="hljs-number">2</span>];<br>            _dl_argc -= <span class="hljs-number">2</span>;<br>            _dl_argv += <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (! <span class="hljs-built_in">strcmp</span> (_dl_argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;--argv0&quot;</span>) &amp;&amp; _dl_argc &gt; <span class="hljs-number">2</span>)<br>        &#123;<br>            argv0 = _dl_argv[<span class="hljs-number">2</span>];<br><br>            _dl_argc -= <span class="hljs-number">2</span>;<br>            _dl_argv += <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span> (_dl_argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;--glibc-hwcaps-prepend&quot;</span>) == <span class="hljs-number">0</span><br>                 &amp;&amp; _dl_argc &gt; <span class="hljs-number">2</span>)<br>        &#123;<br>            state.glibc_hwcaps_prepend = _dl_argv[<span class="hljs-number">2</span>];<br>            _dl_argc -= <span class="hljs-number">2</span>;<br>            _dl_argv += <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span> (_dl_argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;--glibc-hwcaps-mask&quot;</span>) == <span class="hljs-number">0</span><br>                 &amp;&amp; _dl_argc &gt; <span class="hljs-number">2</span>)<br>        &#123;<br>            state.glibc_hwcaps_mask = _dl_argv[<span class="hljs-number">2</span>];<br>            _dl_argc -= <span class="hljs-number">2</span>;<br>            _dl_argv += <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (! <span class="hljs-built_in">strcmp</span> (_dl_argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;--list-tunables&quot;</span>))<br>        &#123;<br>            state.mode = rtld_mode_list_tunables;<br><br>            --_dl_argc;<br>            ++_dl_argv;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (! <span class="hljs-built_in">strcmp</span> (_dl_argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;--list-diagnostics&quot;</span>))<br>        &#123;<br>            state.mode = rtld_mode_list_diagnostics;<br><br>            --_dl_argc;<br>            ++_dl_argv;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span> (_dl_argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;--help&quot;</span>) == <span class="hljs-number">0</span>)<br>        &#123;<br>            state.mode = rtld_mode_help;<br>            --_dl_argc;<br>            ++_dl_argv;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span> (_dl_argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;--version&quot;</span>) == <span class="hljs-number">0</span>)<br>            _dl_version ();<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (_dl_argv[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;-&#x27;</span> &amp;&amp; _dl_argv[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;-&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (_dl_argv[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;\0&#x27;</span>)<br>                <span class="hljs-comment">/* End of option list.  */</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-comment">/* Unrecognized option.  */</span><br>                _dl_usage (ld_so_name, _dl_argv[<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">if</span> (__glibc_unlikely (state.mode == rtld_mode_list_tunables))<br>        &#123;<br>            __tunables_print ();<br>            _exit (<span class="hljs-number">0</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (state.mode == rtld_mode_list_diagnostics)<br>            _dl_print_diagnostics (_environ);<br><br>        <span class="hljs-comment">/* If we have no further argument the program was called incorrectly.</span><br><span class="hljs-comment"> Grant the user some education.  */</span><br>        <span class="hljs-keyword">if</span> (_dl_argc &lt; <span class="hljs-number">2</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (state.mode == rtld_mode_help)<br>                <span class="hljs-comment">/* --help without an executable is not an error.  */</span><br>                _dl_help (ld_so_name, &amp;state);<br>            <span class="hljs-keyword">else</span><br>                _dl_usage (ld_so_name, <span class="hljs-literal">NULL</span>);<br>        &#125;<br><br>        --_dl_argc;<br>        ++_dl_argv;<br><br>        <span class="hljs-comment">/* The initialization of _dl_stack_flags done below assumes the</span><br><span class="hljs-comment"> executable&#x27;s PT_GNU_STACK may have been honored by the kernel, and</span><br><span class="hljs-comment"> so a PT_GNU_STACK with PF_X set means the stack started out with</span><br><span class="hljs-comment"> execute permission.  However, this is not really true if the</span><br><span class="hljs-comment"> dynamic linker is the executable the kernel loaded.  For this</span><br><span class="hljs-comment"> case, we must reinitialize _dl_stack_flags to match the dynamic</span><br><span class="hljs-comment"> linker itself.  If the dynamic linker was built with a</span><br><span class="hljs-comment"> PT_GNU_STACK, then the kernel may have loaded us with a</span><br><span class="hljs-comment"> nonexecutable stack that we will have to make executable when we</span><br><span class="hljs-comment"> load the program below unless it has a PT_GNU_STACK indicating</span><br><span class="hljs-comment"> nonexecutable stack is ok.  */</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> ElfW(Phdr) *ph = phdr; ph &lt; &amp;phdr[phnum]; ++ph)<br>            <span class="hljs-keyword">if</span> (ph-&gt;p_type == PT_GNU_STACK)<br>            &#123;<br>                GL(dl_stack_flags) = ph-&gt;p_flags;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>        <span class="hljs-keyword">if</span> (__glibc_unlikely (state.mode == rtld_mode_verify<br>                              || state.mode == rtld_mode_help))<br>        &#123;<br>            <span class="hljs-type">const</span> <span class="hljs-type">char</span> *objname;<br>            <span class="hljs-type">const</span> <span class="hljs-type">char</span> *err_str = <span class="hljs-literal">NULL</span>;<br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">map_args</span> <span class="hljs-title">args</span>;</span><br>            <span class="hljs-type">bool</span> malloced;<br><br>            args.str = rtld_progname;<br>            args.loader = <span class="hljs-literal">NULL</span>;<br>            args.mode = __RTLD_OPENEXEC;<br>            (<span class="hljs-type">void</span>) _dl_catch_error (&amp;objname, &amp;err_str, &amp;malloced, map_doit,<br>                                    &amp;args);<br>            <span class="hljs-keyword">if</span> (__glibc_unlikely (err_str != <span class="hljs-literal">NULL</span>))<br>            &#123;<br>                <span class="hljs-comment">/* We don&#x27;t free the returned string, the programs stops</span><br><span class="hljs-comment"> anyway.  */</span><br>                <span class="hljs-keyword">if</span> (state.mode == rtld_mode_help)<br>                    <span class="hljs-comment">/* Mask the failure to load the main object.  The help</span><br><span class="hljs-comment">   message contains less information in this case.  */</span><br>                    _dl_help (ld_so_name, &amp;state);<br>                <span class="hljs-keyword">else</span><br>                    _exit (EXIT_FAILURE);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            RTLD_TIMING_VAR (start);<br>            rtld_timer_start (&amp;start);<br>            _dl_map_object (<span class="hljs-literal">NULL</span>, rtld_progname, lt_executable, <span class="hljs-number">0</span>,<br>                            __RTLD_OPENEXEC, LM_ID_BASE);<br>            rtld_timer_stop (&amp;load_time, start);<br>        &#125;<br><br>        <span class="hljs-comment">/* Now the map for the main executable is available.  */</span><br>        main_map = GL(dl_ns)[LM_ID_BASE]._ns_loaded;<br><br>        <span class="hljs-keyword">if</span> (__glibc_likely (state.mode == rtld_mode_normal))<br>            rtld_chain_load (main_map, argv0);<br><br>        phdr = main_map-&gt;l_phdr;<br>        phnum = main_map-&gt;l_phnum;<br>        <span class="hljs-comment">/* We overwrite here a pointer to a malloc()ed string.  But since</span><br><span class="hljs-comment"> the malloc() implementation used at this point is the dummy</span><br><span class="hljs-comment"> implementations which has no real free() function it does not</span><br><span class="hljs-comment"> makes sense to free the old string first.  */</span><br>        main_map-&gt;l_name = (<span class="hljs-type">char</span> *) <span class="hljs-string">&quot;&quot;</span>;<br>        *user_entry = main_map-&gt;l_entry;<br><br>        <span class="hljs-comment">/* Set bit indicating this is the main program map.  */</span><br>        main_map-&gt;l_main_map = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">/* Set the argv[0] string now that we&#x27;ve processed the executable.  */</span><br>        <span class="hljs-keyword">if</span> (argv0 != <span class="hljs-literal">NULL</span>)<br>            _dl_argv[<span class="hljs-number">0</span>] = argv0;<br><br>        <span class="hljs-comment">/* Adjust arguments for the application entry point.  */</span><br>        _dl_start_args_adjust (_dl_argv - orig_argv);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">/* Create a link_map for the executable itself.</span><br><span class="hljs-comment"> This will be what dlopen on &quot;&quot; returns.  */</span><br>        main_map = _dl_new_object ((<span class="hljs-type">char</span> *) <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, lt_executable, <span class="hljs-literal">NULL</span>,<br>                                   __RTLD_OPENEXEC, LM_ID_BASE);<br>        assert (main_map != <span class="hljs-literal">NULL</span>);<br>        main_map-&gt;l_phdr = phdr;<br>        main_map-&gt;l_phnum = phnum;<br>        main_map-&gt;l_entry = *user_entry;<br><br>        <span class="hljs-comment">/* Even though the link map is not yet fully initialized we can add</span><br><span class="hljs-comment"> it to the map list since there are no possible users running yet.  */</span><br>        _dl_add_to_namespace_list (main_map, LM_ID_BASE);<br>        assert (main_map == GL(dl_ns)[LM_ID_BASE]._ns_loaded);<br><br>        <span class="hljs-comment">/* At this point we are in a bit of trouble.  We would have to</span><br><span class="hljs-comment"> fill in the values for l_dev and l_ino.  But in general we</span><br><span class="hljs-comment"> do not know where the file is.  We also do not handle AT_EXECFD</span><br><span class="hljs-comment"> even if it would be passed up.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> We leave the values here defined to 0.  This is normally no</span><br><span class="hljs-comment"> problem as the program code itself is normally no shared</span><br><span class="hljs-comment"> object and therefore cannot be loaded dynamically.  Nothing</span><br><span class="hljs-comment"> prevent the use of dynamic binaries and in these situations</span><br><span class="hljs-comment"> we might get problems.  We might not be able to find out</span><br><span class="hljs-comment"> whether the object is already loaded.  But since there is no</span><br><span class="hljs-comment"> easy way out and because the dynamic binary must also not</span><br><span class="hljs-comment"> have an SONAME we ignore this program for now.  If it becomes</span><br><span class="hljs-comment"> a problem we can force people using SONAMEs.  */</span><br><br>        <span class="hljs-comment">/* We delay initializing the path structure until we got the dynamic</span><br><span class="hljs-comment"> information for the program.  */</span><br>    &#125;<br><br>    <span class="hljs-type">bool</span> has_interp = rtld_setup_main_map (main_map);<br><br>    <span class="hljs-comment">/* If the current libname is different from the SONAME, add the</span><br><span class="hljs-comment">     latter as well.  */</span><br>    <span class="hljs-keyword">if</span> (GL(dl_rtld_map).l_info[DT_SONAME] != <span class="hljs-literal">NULL</span><br>        &amp;&amp; <span class="hljs-built_in">strcmp</span> (GL(dl_rtld_map).l_libname-&gt;name,<br>                   (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *) D_PTR (&amp;GL(dl_rtld_map), l_info[DT_STRTAB])<br>                   + GL(dl_rtld_map).l_info[DT_SONAME]-&gt;d_un.d_val) != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">libname_list</span> <span class="hljs-title">newname</span>;</span><br>        newname.name = ((<span class="hljs-type">char</span> *) D_PTR (&amp;GL(dl_rtld_map), l_info[DT_STRTAB])<br>                        + GL(dl_rtld_map).l_info[DT_SONAME]-&gt;d_un.d_ptr);<br>        newname.next = <span class="hljs-literal">NULL</span>;<br>        newname.dont_free = <span class="hljs-number">1</span>;<br><br>        assert (GL(dl_rtld_map).l_libname-&gt;next == <span class="hljs-literal">NULL</span>);<br>        GL(dl_rtld_map).l_libname-&gt;next = &amp;newname;<br>    &#125;<br>    <span class="hljs-comment">/* The ld.so must be relocated since otherwise loading audit modules</span><br><span class="hljs-comment">     will fail since they reuse the very same ld.so.  */</span><br>    assert (GL(dl_rtld_map).l_relocated);<br><br>    <span class="hljs-keyword">if</span> (! rtld_is_main)<br>    &#123;<br>        <span class="hljs-comment">/* Extract the contents of the dynamic section for easy access.  */</span><br>        elf_get_dynamic_info (main_map, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br><br>        <span class="hljs-comment">/* If the main map is libc.so, update the base namespace to</span><br><span class="hljs-comment"> refer to this map.  If libc.so is loaded later, this happens</span><br><span class="hljs-comment"> in _dl_map_object_from_fd.  */</span><br>        <span class="hljs-keyword">if</span> (main_map-&gt;l_info[DT_SONAME] != <span class="hljs-literal">NULL</span><br>            &amp;&amp; (<span class="hljs-built_in">strcmp</span> (((<span class="hljs-type">const</span> <span class="hljs-type">char</span> *) D_PTR (main_map, l_info[DT_STRTAB])<br>                         + main_map-&gt;l_info[DT_SONAME]-&gt;d_un.d_val), LIBC_SO)<br>                == <span class="hljs-number">0</span>))<br>            GL(dl_ns)[LM_ID_BASE].libc_map = main_map;<br><br>        <span class="hljs-comment">/* Set up our cache of pointers into the hash table.  */</span><br>        _dl_setup_hash (main_map);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (__glibc_unlikely (state.mode == rtld_mode_verify))<br>    &#123;<br>        <span class="hljs-comment">/* We were called just to verify that this is a dynamic</span><br><span class="hljs-comment"> executable using us as the program interpreter.  Exit with an</span><br><span class="hljs-comment"> error if we were not able to load the binary or no interpreter</span><br><span class="hljs-comment"> is specified (i.e., this is no dynamically linked binary.  */</span><br>        <span class="hljs-keyword">if</span> (main_map-&gt;l_ld == <span class="hljs-literal">NULL</span>)<br>            _exit (<span class="hljs-number">1</span>);<br><br>        _exit (has_interp ? <span class="hljs-number">0</span> : <span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> **<span class="hljs-title">first_preload</span> =</span> &amp;GL(dl_rtld_map).l_next;<br>    <span class="hljs-comment">/* Set up the data structures for the system-supplied DSO early,</span><br><span class="hljs-comment">     so they can influence _dl_init_paths.  */</span><br>    setup_vdso (main_map, &amp;first_preload);<br><br>    <span class="hljs-comment">/* With vDSO setup we can initialize the function pointers.  */</span><br>    setup_vdso_pointers ();<br><br>    <span class="hljs-comment">/* Initialize the data structures for the search paths for shared</span><br><span class="hljs-comment">     objects.  */</span><br>    call_init_paths (&amp;state);<br><br>    <span class="hljs-comment">/* Initialize _r_debug_extended.  */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">r_debug</span> *<span class="hljs-title">r</span> =</span> _dl_debug_initialize (GL(dl_rtld_map).l_addr,<br>                                              LM_ID_BASE);<br>    r-&gt;r_state = RT_CONSISTENT;<br><br>    <span class="hljs-comment">/* Put the link_map for ourselves on the chain so it can be found by</span><br><span class="hljs-comment">     name.  Note that at this point the global chain of link maps contains</span><br><span class="hljs-comment">     exactly one element, which is pointed to by dl_loaded.  */</span><br>    <span class="hljs-keyword">if</span> (! GL(dl_rtld_map).l_name)<br>        <span class="hljs-comment">/* If not invoked directly, the dynamic linker shared object file was</span><br><span class="hljs-comment">       found by the PT_INTERP name.  */</span><br>        GL(dl_rtld_map).l_name = (<span class="hljs-type">char</span> *) GL(dl_rtld_map).l_libname-&gt;name;<br>    GL(dl_rtld_map).l_type = lt_library;<br>    main_map-&gt;l_next = &amp;GL(dl_rtld_map);<br>    GL(dl_rtld_map).l_prev = main_map;<br>    ++GL(dl_ns)[LM_ID_BASE]._ns_nloaded;<br>    ++GL(dl_load_adds);<br><br>    <span class="hljs-comment">/* Starting from binutils-2.23, the linker will define the magic symbol</span><br><span class="hljs-comment">     __ehdr_start to point to our own ELF header if it is visible in a</span><br><span class="hljs-comment">     segment that also includes the phdrs.  If that&#x27;s not available, we use</span><br><span class="hljs-comment">     the old method that assumes the beginning of the file is part of the</span><br><span class="hljs-comment">     lowest-addressed PT_LOAD segment.  */</span><br><br>    <span class="hljs-comment">/* Set up the program header information for the dynamic linker</span><br><span class="hljs-comment">     itself.  It is needed in the dl_iterate_phdr callbacks.  */</span><br>    <span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Ehdr)</span> *rtld_ehdr = &amp;__ehdr_start;<br>    assert (rtld_ehdr-&gt;e_ehsize == <span class="hljs-keyword">sizeof</span> *rtld_ehdr);<br>    assert (rtld_ehdr-&gt;e_phentsize == <span class="hljs-keyword">sizeof</span> (ElfW(Phdr)));<br><br>    <span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Phdr)</span> *rtld_phdr = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) rtld_ehdr + rtld_ehdr-&gt;e_phoff;<br><br>    GL(dl_rtld_map).l_phdr = rtld_phdr;<br>    GL(dl_rtld_map).l_phnum = rtld_ehdr-&gt;e_phnum;<br><br><br>    <span class="hljs-comment">/* PT_GNU_RELRO is usually the last phdr.  */</span><br>    <span class="hljs-type">size_t</span> cnt = rtld_ehdr-&gt;e_phnum;<br>    <span class="hljs-keyword">while</span> (cnt-- &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">if</span> (rtld_phdr[cnt].p_type == PT_GNU_RELRO)<br>        &#123;<br>            GL(dl_rtld_map).l_relro_addr = rtld_phdr[cnt].p_vaddr;<br>            GL(dl_rtld_map).l_relro_size = rtld_phdr[cnt].p_memsz;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>    <span class="hljs-comment">/* Add the dynamic linker to the TLS list if it also uses TLS.  */</span><br>    <span class="hljs-keyword">if</span> (GL(dl_rtld_map).l_tls_blocksize != <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">/* Assign a module ID.  Do this before loading any audit modules.  */</span><br>        _dl_assign_tls_modid (&amp;GL(dl_rtld_map));<br><br>    audit_list_add_dynamic_tag (&amp;state.audit_list, main_map, DT_AUDIT);<br>    audit_list_add_dynamic_tag (&amp;state.audit_list, main_map, DT_DEPAUDIT);<br><br>    <span class="hljs-comment">/* At this point, all data has been obtained that is included in the</span><br><span class="hljs-comment">     --help output.  */</span><br>    <span class="hljs-keyword">if</span> (__glibc_unlikely (state.mode == rtld_mode_help))<br>        _dl_help (ld_so_name, &amp;state);<br><br>    <span class="hljs-comment">/* If we have auditing DSOs to load, do it now.  */</span><br>    <span class="hljs-type">bool</span> need_security_init = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (state.audit_list.length &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-type">size_t</span> naudit = audit_list_count (&amp;state.audit_list);<br><br>        <span class="hljs-comment">/* Since we start using the auditing DSOs right away we need to</span><br><span class="hljs-comment"> initialize the data structures now.  */</span><br>        tcbp = init_tls (naudit);<br><br>        <span class="hljs-comment">/* Initialize security features.  We need to do it this early</span><br><span class="hljs-comment"> since otherwise the constructors of the audit libraries will</span><br><span class="hljs-comment"> use different values (especially the pointer guard) and will</span><br><span class="hljs-comment"> fail later on.  */</span><br>        security_init ();<br>        need_security_init = <span class="hljs-literal">false</span>;<br><br>        load_audit_modules (main_map, &amp;state.audit_list);<br><br>        <span class="hljs-comment">/* The count based on audit strings may overestimate the number</span><br><span class="hljs-comment"> of audit modules that got loaded, but not underestimate.  */</span><br>        assert (GLRO(dl_naudit) &lt;= naudit);<br>    &#125;<br><br>    <span class="hljs-comment">/* Keep track of the currently loaded modules to count how many</span><br><span class="hljs-comment">     non-audit modules which use TLS are loaded.  */</span><br>    <span class="hljs-type">size_t</span> count_modids = _dl_count_modids ();<br><br>    <span class="hljs-comment">/* Set up debugging before the debugger is notified for the first time.  */</span><br>    elf_setup_debug_entry (main_map, r);<br><br>    <span class="hljs-comment">/* We start adding objects.  */</span><br>    r-&gt;r_state = RT_ADD;<br>    _dl_debug_state ();<br>    LIBC_PROBE (init_start, <span class="hljs-number">2</span>, LM_ID_BASE, r);<br><br>    <span class="hljs-comment">/* Auditing checkpoint: we are ready to signal that the initial map</span><br><span class="hljs-comment">     is being constructed.  */</span><br>    _dl_audit_activity_map (main_map, LA_ACT_ADD);<br><br>    <span class="hljs-comment">/* We have two ways to specify objects to preload: via environment</span><br><span class="hljs-comment">     variable and via the file /etc/ld.so.preload.  The latter can also</span><br><span class="hljs-comment">     be used when security is enabled.  */</span><br>    assert (*first_preload == <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> **<span class="hljs-title">preloads</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> npreloads = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (__glibc_unlikely (state.preloadlist != <span class="hljs-literal">NULL</span>))<br>    &#123;<br>        RTLD_TIMING_VAR (start);<br>        rtld_timer_start (&amp;start);<br>        npreloads += handle_preload_list (state.preloadlist, main_map,<br>                                          <span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br>        rtld_timer_accum (&amp;load_time, start);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (__glibc_unlikely (state.preloadarg != <span class="hljs-literal">NULL</span>))<br>    &#123;<br>        RTLD_TIMING_VAR (start);<br>        rtld_timer_start (&amp;start);<br>        npreloads += handle_preload_list (state.preloadarg, main_map,<br>                                          <span class="hljs-string">&quot;--preload&quot;</span>);<br>        rtld_timer_accum (&amp;load_time, start);<br>    &#125;<br><br>    <span class="hljs-comment">/* There usually is no ld.so.preload file, it should only be used</span><br><span class="hljs-comment">     for emergencies and testing.  So the open call etc should usually</span><br><span class="hljs-comment">     fail.  Using access() on a non-existing file is faster than using</span><br><span class="hljs-comment">     open().  So we do this first.  If it succeeds we do almost twice</span><br><span class="hljs-comment">     the work but this does not matter, since it is not for production</span><br><span class="hljs-comment">     use.  */</span><br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> preload_file[] = <span class="hljs-string">&quot;/etc/ld.so.preload&quot;</span>;<br>    <span class="hljs-keyword">if</span> (__glibc_unlikely (__access (preload_file, R_OK) == <span class="hljs-number">0</span>))<br>    &#123;<br>        <span class="hljs-comment">/* Read the contents of the file.  */</span><br>        file = _dl_sysdep_read_whole_file (preload_file, &amp;file_size,<br>                                           PROT_READ | PROT_WRITE);<br>        <span class="hljs-keyword">if</span> (__glibc_unlikely (file != MAP_FAILED))<br>        &#123;<br>            <span class="hljs-comment">/* Parse the file.  It contains names of libraries to be loaded,</span><br><span class="hljs-comment">     separated by white spaces or `:&#x27;.  It may also contain</span><br><span class="hljs-comment">     comments introduced by `#&#x27;.  */</span><br>            <span class="hljs-type">char</span> *problem;<br>            <span class="hljs-type">char</span> *runp;<br>            <span class="hljs-type">size_t</span> rest;<br><br>            <span class="hljs-comment">/* Eliminate comments.  */</span><br>            runp = file;<br>            rest = file_size;<br>            <span class="hljs-keyword">while</span> (rest &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-type">char</span> *comment = <span class="hljs-built_in">memchr</span> (runp, <span class="hljs-string">&#x27;#&#x27;</span>, rest);<br>                <span class="hljs-keyword">if</span> (comment == <span class="hljs-literal">NULL</span>)<br>                    <span class="hljs-keyword">break</span>;<br><br>                rest -= comment - runp;<br>                <span class="hljs-keyword">do</span><br>                    *comment = <span class="hljs-string">&#x27; &#x27;</span>;<br>                <span class="hljs-keyword">while</span> (--rest &gt; <span class="hljs-number">0</span> &amp;&amp; *++comment != <span class="hljs-string">&#x27;\n&#x27;</span>);<br>            &#125;<br><br>            <span class="hljs-comment">/* We have one problematic case: if we have a name at the end of</span><br><span class="hljs-comment">     the file without a trailing terminating characters, we cannot</span><br><span class="hljs-comment">     place the \0.  Handle the case separately.  */</span><br>            <span class="hljs-keyword">if</span> (file[file_size - <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27; &#x27;</span> &amp;&amp; file[file_size - <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;\t&#x27;</span><br>                &amp;&amp; file[file_size - <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;\n&#x27;</span> &amp;&amp; file[file_size - <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;:&#x27;</span>)<br>            &#123;<br>                problem = &amp;file[file_size];<br>                <span class="hljs-keyword">while</span> (problem &gt; file &amp;&amp; problem[<span class="hljs-number">-1</span>] != <span class="hljs-string">&#x27; &#x27;</span><br>                       &amp;&amp; problem[<span class="hljs-number">-1</span>] != <span class="hljs-string">&#x27;\t&#x27;</span><br>                       &amp;&amp; problem[<span class="hljs-number">-1</span>] != <span class="hljs-string">&#x27;\n&#x27;</span> &amp;&amp; problem[<span class="hljs-number">-1</span>] != <span class="hljs-string">&#x27;:&#x27;</span>)<br>                    --problem;<br><br>                <span class="hljs-keyword">if</span> (problem &gt; file)<br>                    problem[<span class="hljs-number">-1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                problem = <span class="hljs-literal">NULL</span>;<br>                file[file_size - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>            &#125;<br><br>            RTLD_TIMING_VAR (start);<br>            rtld_timer_start (&amp;start);<br><br>            <span class="hljs-keyword">if</span> (file != problem)<br>            &#123;<br>                <span class="hljs-type">char</span> *p;<br>                runp = file;<br>                <span class="hljs-keyword">while</span> ((p = strsep (&amp;runp, <span class="hljs-string">&quot;: \t\n&quot;</span>)) != <span class="hljs-literal">NULL</span>)<br>                    <span class="hljs-keyword">if</span> (p[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>                        npreloads += do_preload (p, main_map, preload_file);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (problem != <span class="hljs-literal">NULL</span>)<br>            &#123;<br>                <span class="hljs-type">char</span> *p = strndupa (problem, file_size - (problem - file));<br><br>                npreloads += do_preload (p, main_map, preload_file);<br>            &#125;<br><br>            rtld_timer_accum (&amp;load_time, start);<br><br>            <span class="hljs-comment">/* We don&#x27;t need the file anymore.  */</span><br>            __munmap (file, file_size);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (__glibc_unlikely (*first_preload != <span class="hljs-literal">NULL</span>))<br>    &#123;<br>        <span class="hljs-comment">/* Set up PRELOADS with a vector of the preloaded libraries.  */</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">l</span> =</span> *first_preload;<br>        preloads = __alloca (npreloads * <span class="hljs-keyword">sizeof</span> preloads[<span class="hljs-number">0</span>]);<br>        i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>            preloads[i++] = l;<br>            l = l-&gt;l_next;<br>        &#125; <span class="hljs-keyword">while</span> (l);<br>        assert (i == npreloads);<br>    &#125;<br> &#123;<br>    RTLD_TIMING_VAR (start);<br>    rtld_timer_start (&amp;start);<br>    _dl_map_object_deps (main_map, preloads, npreloads,<br> state.mode == rtld_mode_trace, <span class="hljs-number">0</span>);<br>    rtld_timer_accum (&amp;load_time, start);<br>  &#125;<br><br>  <span class="hljs-comment">/* Mark all objects as being in the global scope.  */</span><br>  <span class="hljs-keyword">for</span> (i = main_map-&gt;l_searchlist.r_nlist; i &gt; <span class="hljs-number">0</span>; )<br>    main_map-&gt;l_searchlist.r_list[--i]-&gt;l_global = <span class="hljs-number">1</span>;<br><br>  <span class="hljs-comment">/* Remove _dl_rtld_map from the chain.  */</span><br>  GL(dl_rtld_map).l_prev-&gt;l_next = GL(dl_rtld_map).l_next;<br>  <span class="hljs-keyword">if</span> (GL(dl_rtld_map).l_next != <span class="hljs-literal">NULL</span>)<br>    GL(dl_rtld_map).l_next-&gt;l_prev = GL(dl_rtld_map).l_prev;<br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; main_map-&gt;l_searchlist.r_nlist; ++i)<br>    <span class="hljs-keyword">if</span> (main_map-&gt;l_searchlist.r_list[i] == &amp;GL(dl_rtld_map))<br>      <span class="hljs-keyword">break</span>;<br><br>  <span class="hljs-type">bool</span> rtld_multiple_ref = <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">if</span> (__glibc_likely (i &lt; main_map-&gt;l_searchlist.r_nlist))<br>    &#123;<br>      <span class="hljs-comment">/* Some DT_NEEDED entry referred to the interpreter object itself, so</span><br><span class="hljs-comment"> put it back in the list of visible objects.  We insert it into the</span><br><span class="hljs-comment"> chain in symbol search order because gdb uses the chain&#x27;s order as</span><br><span class="hljs-comment"> its symbol search order.  */</span><br>      rtld_multiple_ref = <span class="hljs-literal">true</span>;<br><br>      GL(dl_rtld_map).l_prev = main_map-&gt;l_searchlist.r_list[i - <span class="hljs-number">1</span>];<br>      <span class="hljs-keyword">if</span> (__glibc_likely (state.mode == rtld_mode_normal))<br>&#123;<br>  GL(dl_rtld_map).l_next = (i + <span class="hljs-number">1</span> &lt; main_map-&gt;l_searchlist.r_nlist<br>    ? main_map-&gt;l_searchlist.r_list[i + <span class="hljs-number">1</span>]<br>    : <span class="hljs-literal">NULL</span>);<br>&#125;<br>      <span class="hljs-keyword">else</span><br><span class="hljs-comment">/* In trace mode there might be an invisible object (which we</span><br><span class="hljs-comment">   could not find) after the previous one in the search list.</span><br><span class="hljs-comment">   In this case it doesn&#x27;t matter much where we put the</span><br><span class="hljs-comment">   interpreter object, so we just initialize the list pointer so</span><br><span class="hljs-comment">   that the assertion below holds.  */</span><br>GL(dl_rtld_map).l_next = GL(dl_rtld_map).l_prev-&gt;l_next;<br><br>      assert (GL(dl_rtld_map).l_prev-&gt;l_next == GL(dl_rtld_map).l_next);<br>      GL(dl_rtld_map).l_prev-&gt;l_next = &amp;GL(dl_rtld_map);<br>      <span class="hljs-keyword">if</span> (GL(dl_rtld_map).l_next != <span class="hljs-literal">NULL</span>)<br>&#123;<br>  assert (GL(dl_rtld_map).l_next-&gt;l_prev == GL(dl_rtld_map).l_prev);<br>  GL(dl_rtld_map).l_next-&gt;l_prev = &amp;GL(dl_rtld_map);<br>&#125;<br>    &#125;<br><br>  <span class="hljs-comment">/* Now let us see whether all libraries are available in the</span><br><span class="hljs-comment">     versions we need.  */</span><br>  &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">version_check_args</span> <span class="hljs-title">args</span>;</span><br>    args.doexit = state.mode == rtld_mode_normal;<br>    args.dotrace = state.mode == rtld_mode_trace;<br>    _dl_receive_error (print_missing_version, version_check_doit, &amp;args);<br>  &#125;<br><br>  <span class="hljs-comment">/* We do not initialize any of the TLS functionality unless any of the</span><br><span class="hljs-comment">     initial modules uses TLS.  This makes dynamic loading of modules with</span><br><span class="hljs-comment">     TLS impossible, but to support it requires either eagerly doing setup</span><br><span class="hljs-comment">     now or lazily doing it later.  Doing it now makes us incompatible with</span><br><span class="hljs-comment">     an old kernel that can&#x27;t perform TLS_INIT_TP, even if no TLS is ever</span><br><span class="hljs-comment">     used.  Trying to do it lazily is too hairy to try when there could be</span><br><span class="hljs-comment">     multiple threads (from a non-TLS-using libpthread).  */</span><br>  <span class="hljs-type">bool</span> was_tls_init_tp_called = __rtld_tls_init_tp_called;<br>  <span class="hljs-keyword">if</span> (tcbp == <span class="hljs-literal">NULL</span>)<br>    tcbp = init_tls (<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">if</span> (__glibc_likely (need_security_init))<br>    <span class="hljs-comment">/* Initialize security features.  But only if we have not done it</span><br><span class="hljs-comment">       earlier.  */</span><br>    security_init ();<br><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (state.mode != rtld_mode_normal))<br>    &#123;<br>      <span class="hljs-comment">/* We were run just to list the shared libraries.  It is</span><br><span class="hljs-comment"> important that we do this before real relocation, because the</span><br><span class="hljs-comment"> functions we call below for output may no longer work properly</span><br><span class="hljs-comment"> after relocation.  */</span><br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">l</span>;</span><br><br>      <span class="hljs-keyword">if</span> (GLRO(dl_debug_mask) &amp; DL_DEBUG_UNUSED)<br>&#123;<br>  <span class="hljs-comment">/* Look through the dependencies of the main executable</span><br><span class="hljs-comment">     and determine which of them is not actually</span><br><span class="hljs-comment">     required.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">l</span> =</span> main_map;<br><br>  <span class="hljs-comment">/* Relocate the main executable.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">relocate_args</span> <span class="hljs-title">args</span> =</span> &#123; .l = l,<br>.reloc_mode = ((GLRO(dl_lazy)<br>       ? RTLD_LAZY : <span class="hljs-number">0</span>)<br>       | __RTLD_NOIFUNC) &#125;;<br>  _dl_receive_error (print_unresolved, relocate_doit, &amp;args);<br><br>  <span class="hljs-comment">/* This loop depends on the dependencies of the executable to</span><br><span class="hljs-comment">     correspond in number and order to the DT_NEEDED entries.  */</span><br>  ElfW(Dyn) *dyn = main_map-&gt;l_ld;<br>  <span class="hljs-type">bool</span> first = <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">while</span> (dyn-&gt;d_tag != DT_NULL)<br>    &#123;<br>      <span class="hljs-keyword">if</span> (dyn-&gt;d_tag == DT_NEEDED)<br>&#123;<br>  l = l-&gt;l_next;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> NEED_DL_SYSINFO_DSO</span><br>  <span class="hljs-comment">/* Skip the VDSO since it&#x27;s not part of the list</span><br><span class="hljs-comment">     of objects we brought in via DT_NEEDED entries.  */</span><br>  <span class="hljs-keyword">if</span> (l == GLRO(dl_sysinfo_map))<br>    l = l-&gt;l_next;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-keyword">if</span> (!l-&gt;l_used)<br>    &#123;<br>      <span class="hljs-keyword">if</span> (first)<br>&#123;<br>  _dl_printf (<span class="hljs-string">&quot;Unused direct dependencies:\n&quot;</span>);<br>  first = <span class="hljs-literal">false</span>;<br>&#125;<br><br>      _dl_printf (<span class="hljs-string">&quot;\t%s\n&quot;</span>, l-&gt;l_name);<br>    &#125;<br>&#125;<br><br>      ++dyn;<br>    &#125;<br><br>  _exit (first != <span class="hljs-literal">true</span>);<br>&#125;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (! main_map-&gt;l_info[DT_NEEDED])<br>_dl_printf (<span class="hljs-string">&quot;\tstatically linked\n&quot;</span>);<br>      <span class="hljs-keyword">else</span><br>&#123;<br>  <span class="hljs-keyword">for</span> (l = state.mode_trace_program ? main_map : main_map-&gt;l_next;<br>       l; l = l-&gt;l_next) &#123;<br>    <span class="hljs-keyword">if</span> (l-&gt;l_faked)<br>      <span class="hljs-comment">/* The library was not found.  */</span><br>      _dl_printf (<span class="hljs-string">&quot;\t%s =&gt; not found\n&quot;</span>,  l-&gt;l_libname-&gt;name);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span> (l-&gt;l_libname-&gt;name, l-&gt;l_name) == <span class="hljs-number">0</span>)<br>      <span class="hljs-comment">/* Print vDSO like libraries without duplicate name.  Some</span><br><span class="hljs-comment"> consumers depend of this format.  */</span><br>      _dl_printf (<span class="hljs-string">&quot;\t%s (0x%0*zx)\n&quot;</span>, l-&gt;l_libname-&gt;name,<br>  (<span class="hljs-type">int</span>) <span class="hljs-keyword">sizeof</span> l-&gt;l_map_start * <span class="hljs-number">2</span>,<br>  (<span class="hljs-type">size_t</span>) l-&gt;l_map_start);<br>    <span class="hljs-keyword">else</span><br>      _dl_printf (<span class="hljs-string">&quot;\t%s =&gt; %s (0x%0*zx)\n&quot;</span>,<br>  DSO_FILENAME (l-&gt;l_libname-&gt;name),<br>  DSO_FILENAME (l-&gt;l_name),<br>  (<span class="hljs-type">int</span>) <span class="hljs-keyword">sizeof</span> l-&gt;l_map_start * <span class="hljs-number">2</span>,<br>  (<span class="hljs-type">size_t</span>) l-&gt;l_map_start);<br>  &#125;<br>&#125;<br><br>      <span class="hljs-keyword">if</span> (__glibc_unlikely (state.mode != rtld_mode_trace))<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>) _dl_argc; ++i)<br>  &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Sym)</span> *ref = <span class="hljs-literal">NULL</span>;<br>    ElfW(Addr) loadbase;<br>    <span class="hljs-type">lookup_t</span> result;<br><br>    result = _dl_lookup_symbol_x (_dl_argv[i], main_map,<br>  &amp;ref, main_map-&gt;l_scope,<br>  <span class="hljs-literal">NULL</span>, ELF_RTYPE_CLASS_PLT,<br>  DL_LOOKUP_ADD_DEPENDENCY, <span class="hljs-literal">NULL</span>);<br><br>    loadbase = LOOKUP_VALUE_ADDRESS (result, <span class="hljs-literal">false</span>);<br><br>    _dl_printf (<span class="hljs-string">&quot;%s found at 0x%0*zd in object at 0x%0*zd\n&quot;</span>,<br>_dl_argv[i],<br>(<span class="hljs-type">int</span>) <span class="hljs-keyword">sizeof</span> ref-&gt;st_value * <span class="hljs-number">2</span>,<br>(<span class="hljs-type">size_t</span>) ref-&gt;st_value,<br>(<span class="hljs-type">int</span>) <span class="hljs-keyword">sizeof</span> loadbase * <span class="hljs-number">2</span>, (<span class="hljs-type">size_t</span>) loadbase);<br>  &#125;<br>      <span class="hljs-keyword">else</span><br>&#123;<br>  <span class="hljs-comment">/* If LD_WARN is set, warn about undefined symbols.  */</span><br>  <span class="hljs-keyword">if</span> (GLRO(dl_lazy) &gt;= <span class="hljs-number">0</span> &amp;&amp; GLRO(dl_verbose))<br>    &#123;<br>      <span class="hljs-comment">/* We have to do symbol dependency testing.  */</span><br>      <span class="hljs-keyword">struct</span> relocate_args args;<br>      <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br><br>      args.reloc_mode = ((GLRO(dl_lazy) ? RTLD_LAZY : <span class="hljs-number">0</span>)<br> | __RTLD_NOIFUNC);<br><br>      i = main_map-&gt;l_searchlist.r_nlist;<br>      <span class="hljs-keyword">while</span> (i-- &gt; <span class="hljs-number">0</span>)<br>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">l</span> =</span> main_map-&gt;l_initfini[i];<br>  <span class="hljs-keyword">if</span> (l != &amp;GL(dl_rtld_map) &amp;&amp; ! l-&gt;l_faked)<br>    &#123;<br>      args.l = l;<br>      _dl_receive_error (print_unresolved, relocate_doit,<br> &amp;args);<br>    &#125;<br>&#125;<br><br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VERNEEDTAG (DT_NUM + DT_THISPROCNUM + DT_VERSIONTAGIDX (DT_VERNEED))</span><br>  <span class="hljs-keyword">if</span> (state.version_info)<br>    &#123;<br>      <span class="hljs-comment">/* Print more information.  This means here, print information</span><br><span class="hljs-comment"> about the versions needed.  */</span><br>      <span class="hljs-type">int</span> first = <span class="hljs-number">1</span>;<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">map</span>;</span><br><br>      <span class="hljs-keyword">for</span> (<span class="hljs-built_in">map</span> = main_map; <span class="hljs-built_in">map</span> != <span class="hljs-literal">NULL</span>; <span class="hljs-built_in">map</span> = <span class="hljs-built_in">map</span>-&gt;l_next)<br>&#123;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *strtab;<br>  ElfW(Dyn) *dyn = <span class="hljs-built_in">map</span>-&gt;l_info[VERNEEDTAG];<br>  ElfW(Verneed) *ent;<br><br>  <span class="hljs-keyword">if</span> (dyn == <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-keyword">continue</span>;<br><br>  strtab = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) D_PTR (<span class="hljs-built_in">map</span>, l_info[DT_STRTAB]);<br>  ent = (ElfW(Verneed) *) (<span class="hljs-built_in">map</span>-&gt;l_addr + dyn-&gt;d_un.d_ptr);<br><br>  <span class="hljs-keyword">if</span> (first)<br>    &#123;<br>      _dl_printf (<span class="hljs-string">&quot;\n\tVersion information:\n&quot;</span>);<br>      first = <span class="hljs-number">0</span>;<br>    &#125;<br><br>  _dl_printf (<span class="hljs-string">&quot;\t%s:\n&quot;</span>, DSO_FILENAME (<span class="hljs-built_in">map</span>-&gt;l_name));<br><br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>      ElfW(Vernaux) *aux;<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">needed</span>;</span><br><br>      needed = find_needed (strtab + ent-&gt;vn_file);<br>      aux = (ElfW(Vernaux) *) ((<span class="hljs-type">char</span> *) ent + ent-&gt;vn_aux);<br><br>      <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *fname = <span class="hljs-literal">NULL</span>;<br><br>  <span class="hljs-keyword">if</span> (needed != <span class="hljs-literal">NULL</span><br>      &amp;&amp; match_version (strtab + aux-&gt;vna_name,<br>needed))<br>    fname = needed-&gt;l_name;<br><br>  _dl_printf (<span class="hljs-string">&quot;\t\t%s (%s) %s=&gt; %s\n&quot;</span>,<br>      strtab + ent-&gt;vn_file,<br>      strtab + aux-&gt;vna_name,<br>      aux-&gt;vna_flags &amp; VER_FLG_WEAK<br>      ? <span class="hljs-string">&quot;[WEAK] &quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>      fname ?: <span class="hljs-string">&quot;not found&quot;</span>);<br><br>  <span class="hljs-keyword">if</span> (aux-&gt;vna_next == <span class="hljs-number">0</span>)<br>    <span class="hljs-comment">/* No more symbols.  */</span><br>    <span class="hljs-keyword">break</span>;<br><br>  <span class="hljs-comment">/* Next symbol.  */</span><br>  aux = (ElfW(Vernaux) *) ((<span class="hljs-type">char</span> *) aux<br>   + aux-&gt;vna_next);<br>&#125;<br><br>      <span class="hljs-keyword">if</span> (ent-&gt;vn_next == <span class="hljs-number">0</span>)<br><span class="hljs-comment">/* No more dependencies.  */</span><br><span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-comment">/* Next dependency.  */</span><br>      ent = (ElfW(Verneed) *) ((<span class="hljs-type">char</span> *) ent + ent-&gt;vn_next);<br>    &#125;<br>&#125;<br>    &#125;<br>&#125;<br><br>      _exit (<span class="hljs-number">0</span>);<br>    &#125;<br><br>  <span class="hljs-comment">/* Now set up the variable which helps the assembler startup code.  */</span><br>  GL(dl_ns)[LM_ID_BASE]._ns_main_searchlist = &amp;main_map-&gt;l_searchlist;<br><br>  <span class="hljs-comment">/* Save the information about the original global scope list since</span><br><span class="hljs-comment">     we need it in the memory handling later.  */</span><br>  GLRO(dl_initial_searchlist) = *GL(dl_ns)[LM_ID_BASE]._ns_main_searchlist;<br><br>  <span class="hljs-comment">/* Remember the last search directory added at startup, now that</span><br><span class="hljs-comment">     malloc will no longer be the one from dl-minimal.c.  As a side</span><br><span class="hljs-comment">     effect, this marks ld.so as initialized, so that the rtld_active</span><br><span class="hljs-comment">     function returns true from now on.  */</span><br>  GLRO(dl_init_all_dirs) = GL(dl_all_dirs);<br><br>  <span class="hljs-comment">/* Print scope information.  */</span><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (GLRO(dl_debug_mask) &amp; DL_DEBUG_SCOPES))<br>    &#123;<br>      _dl_debug_printf (<span class="hljs-string">&quot;\nInitial object scopes\n&quot;</span>);<br><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">struct</span> link_map *l = main_map; l != <span class="hljs-literal">NULL</span>; l = l-&gt;l_next)<br>_dl_show_scope (l, <span class="hljs-number">0</span>);<br>    &#125;<br><br>  _rtld_main_check (main_map, _dl_argv[<span class="hljs-number">0</span>]);<br><br>  <span class="hljs-comment">/* Now we have all the objects loaded.  Relocate them all except for</span><br><span class="hljs-comment">     the dynamic linker itself.  We do this in reverse order so that copy</span><br><span class="hljs-comment">     relocs of earlier objects overwrite the data written by later</span><br><span class="hljs-comment">     objects.  We do not re-relocate the dynamic linker itself in this</span><br><span class="hljs-comment">     loop because that could result in the GOT entries for functions we</span><br><span class="hljs-comment">     call being changed, and that would break us.  It is safe to relocate</span><br><span class="hljs-comment">     the dynamic linker out of order because it has no copy relocations.</span><br><span class="hljs-comment">     Likewise for libc, which is relocated early to ensure that IFUNC</span><br><span class="hljs-comment">     resolvers in libc work.  */</span><br><br>  <span class="hljs-type">int</span> consider_profiling = GLRO(dl_profile) != <span class="hljs-literal">NULL</span>;<br><br>  <span class="hljs-comment">/* If we are profiling we also must do lazy reloaction.  */</span><br>  GLRO(dl_lazy) |= consider_profiling;<br><br>  <span class="hljs-keyword">if</span> (GL(dl_ns)[LM_ID_BASE].libc_map != <span class="hljs-literal">NULL</span>)<br>    _dl_relocate_object (GL(dl_ns)[LM_ID_BASE].libc_map,<br> GL(dl_ns)[LM_ID_BASE].libc_map-&gt;l_scope,<br> GLRO(dl_lazy) ? RTLD_LAZY : <span class="hljs-number">0</span>, consider_profiling);<br><br>  RTLD_TIMING_VAR (start);<br>  rtld_timer_start (&amp;start);<br>  &#123;<br>    <span class="hljs-type">unsigned</span> i = main_map-&gt;l_searchlist.r_nlist;<br>    <span class="hljs-keyword">while</span> (i-- &gt; <span class="hljs-number">0</span>)<br>      &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">l</span> =</span> main_map-&gt;l_initfini[i];<br><br><span class="hljs-comment">/* While we are at it, help the memory handling a bit.  We have to</span><br><span class="hljs-comment">   mark some data structures as allocated with the fake malloc()</span><br><span class="hljs-comment">   implementation in ld.so.  */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">libname_list</span> *<span class="hljs-title">lnp</span> =</span> l-&gt;l_libname-&gt;next;<br><br><span class="hljs-keyword">while</span> (__builtin_expect (lnp != <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>))<br>  &#123;<br>    lnp-&gt;dont_free = <span class="hljs-number">1</span>;<br>    lnp = lnp-&gt;next;<br>  &#125;<br><span class="hljs-comment">/* Also allocated with the fake malloc().  */</span><br>l-&gt;l_free_initfini = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">if</span> (l != &amp;GL(dl_rtld_map))<br>  _dl_relocate_object (l, l-&gt;l_scope, GLRO(dl_lazy) ? RTLD_LAZY : <span class="hljs-number">0</span>,<br>       consider_profiling);<br><br><span class="hljs-comment">/* Add object to slot information data if necessasy.  */</span><br><span class="hljs-keyword">if</span> (l-&gt;l_tls_blocksize != <span class="hljs-number">0</span> &amp;&amp; __rtld_tls_init_tp_called)<br>  _dl_add_to_slotinfo (l, <span class="hljs-literal">true</span>);<br>      &#125;<br>  &#125;<br>  rtld_timer_stop (&amp;relocate_time, start);<br><br>  <span class="hljs-comment">/* Now enable profiling if needed.  Like the previous call,</span><br><span class="hljs-comment">     this has to go here because the calls it makes should use the</span><br><span class="hljs-comment">     rtld versions of the functions (particularly calloc()), but it</span><br><span class="hljs-comment">     needs to have _dl_profile_map set up by the relocator.  */</span><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (GL(dl_profile_map) != <span class="hljs-literal">NULL</span>))<br>    <span class="hljs-comment">/* We must prepare the profiling.  */</span><br>    _dl_start_profile ();<br><br>  <span class="hljs-keyword">if</span> ((!was_tls_init_tp_called &amp;&amp; GL(dl_tls_max_dtv_idx) &gt; <span class="hljs-number">0</span>)<br>      || count_modids != _dl_count_modids ())<br>    ++GL(dl_tls_generation);<br><br>  <span class="hljs-comment">/* Now that we have completed relocation, the initializer data</span><br><span class="hljs-comment">     for the TLS blocks has its final values and we can copy them</span><br><span class="hljs-comment">     into the main thread&#x27;s TLS area, which we allocated above.</span><br><span class="hljs-comment">     Note: thread-local variables must only be accessed after completing</span><br><span class="hljs-comment">     the next step.  */</span><br>  _dl_allocate_tls_init (tcbp, <span class="hljs-literal">false</span>);<br><br>  <span class="hljs-comment">/* And finally install it for the main thread.  */</span><br>  <span class="hljs-keyword">if</span> (! __rtld_tls_init_tp_called)<br>    call_tls_init_tp (tcbp);<br><br>  <span class="hljs-comment">/* Make sure no new search directories have been added.  */</span><br>  assert (GLRO(dl_init_all_dirs) == GL(dl_all_dirs));<br><br>  <span class="hljs-keyword">if</span> (rtld_multiple_ref)<br>    &#123;<br>      <span class="hljs-comment">/* There was an explicit ref to the dynamic linker as a shared lib.</span><br><span class="hljs-comment"> Re-relocate ourselves with user-controlled symbol definitions.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> We must do this after TLS initialization in case after this</span><br><span class="hljs-comment"> re-relocation, we might call a user-supplied function</span><br><span class="hljs-comment"> (e.g. calloc from _dl_relocate_object) that uses TLS data.  */</span><br><br>      <span class="hljs-comment">/* Set up the object lookup structures.  */</span><br>      _dl_find_object_init ();<br><br>      <span class="hljs-comment">/* The malloc implementation has been relocated, so resolving</span><br><span class="hljs-comment"> its symbols (and potentially calling IFUNC resolvers) is safe</span><br><span class="hljs-comment"> at this point.  */</span><br>      __rtld_malloc_init_real (main_map);<br><br>      <span class="hljs-comment">/* Likewise for the locking implementation.  */</span><br>      __rtld_mutex_init ();<br><br>      RTLD_TIMING_VAR (start);<br>      rtld_timer_start (&amp;start);<br><br>      <span class="hljs-comment">/* Mark the link map as not yet relocated again.  */</span><br>      GL(dl_rtld_map).l_relocated = <span class="hljs-number">0</span>;<br>      _dl_relocate_object (&amp;GL(dl_rtld_map), main_map-&gt;l_scope, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br>      rtld_timer_accum (&amp;relocate_time, start);<br>    &#125;<br><br>  <span class="hljs-comment">/* Relocation is complete.  Perform early libc initialization.  This</span><br><span class="hljs-comment">     is the initial libc, even if audit modules have been loaded with</span><br><span class="hljs-comment">     other libcs.  */</span><br>  _dl_call_libc_early_init (GL(dl_ns)[LM_ID_BASE].libc_map, <span class="hljs-literal">true</span>);<br><br>  <span class="hljs-comment">/* Do any necessary cleanups for the startup OS interface code.</span><br><span class="hljs-comment">     We do these now so that no calls are made after rtld re-relocation</span><br><span class="hljs-comment">     which might be resolved to different functions than we expect.</span><br><span class="hljs-comment">     We cannot do this before relocating the other objects because</span><br><span class="hljs-comment">     _dl_relocate_object might need to call `mprotect&#x27; for DT_TEXTREL.  */</span><br>  _dl_sysdep_start_cleanup ();<br><br>  <span class="hljs-comment">/* Auditing checkpoint: we have added all objects.  */</span><br>  _dl_audit_activity_nsid (LM_ID_BASE, LA_ACT_CONSISTENT);<br><br>  <span class="hljs-comment">/* Notify the debugger all new objects are now ready to go.  We must re-get</span><br><span class="hljs-comment">     the address since by now the variable might be in another object.  */</span><br>  r = _dl_debug_update (LM_ID_BASE);<br>  r-&gt;r_state = RT_CONSISTENT;<br>  _dl_debug_state ();<br>  LIBC_PROBE (init_complete, <span class="hljs-number">2</span>, LM_ID_BASE, r);<br><br>  <span class="hljs-comment">/* Once we return, _dl_sysdep_start will invoke</span><br><span class="hljs-comment">     the DT_INIT functions and then *USER_ENTRY.  */</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="dl-fini"><a href="#dl-fini" class="headerlink" title="_dl_fini"></a>_dl_fini</h2><p>调用所有动态库的<code>fini</code>并释放</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> _dl_fini (<span class="hljs-type">void</span>)<br>&#123;<br>  <span class="hljs-comment">/* Lots of fun ahead.  We have to call the destructors for all still</span><br><span class="hljs-comment">     loaded objects, in all namespaces.  The problem is that the ELF</span><br><span class="hljs-comment">     specification now demands that dependencies between the modules</span><br><span class="hljs-comment">     are taken into account.  I.e., the destructor for a module is</span><br><span class="hljs-comment">     called before the ones for any of its dependencies.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     To make things more complicated, we cannot simply use the reverse</span><br><span class="hljs-comment">     order of the constructors.  Since the user might have loaded objects</span><br><span class="hljs-comment">     using `dlopen&#x27; there are possibly several other modules with its</span><br><span class="hljs-comment">     dependencies to be taken into account.  Therefore we have to start</span><br><span class="hljs-comment">     determining the order of the modules once again from the beginning.  */</span><br><br>  <span class="hljs-comment">/* We run the destructors of the main namespaces last.  As for the</span><br><span class="hljs-comment">     other namespaces, we pick run the destructors in them in reverse</span><br><span class="hljs-comment">     order of the namespace ID.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SHARED</span><br>  <span class="hljs-type">int</span> do_audit = <span class="hljs-number">0</span>;<br> again:<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-keyword">for</span> (Lmid_t ns = GL(dl_nns) - <span class="hljs-number">1</span>; ns &gt;= <span class="hljs-number">0</span>; --ns)<br>    &#123;<br>      <span class="hljs-comment">/* Protect against concurrent loads and unloads.  */</span><br>      __rtld_lock_lock_recursive (GL(dl_load_lock));<br><br>      <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> nloaded = GL(dl_ns)[ns]._ns_nloaded;<br>      <span class="hljs-comment">/* No need to do anything for empty namespaces or those used for</span><br><span class="hljs-comment"> auditing DSOs.  */</span><br>      <span class="hljs-keyword">if</span> (nloaded == <span class="hljs-number">0</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SHARED</span><br>  || GL(dl_ns)[ns]._ns_loaded-&gt;l_auditing != do_audit<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  )<br>__rtld_lock_unlock_recursive (GL(dl_load_lock));<br>      <span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SHARED</span><br>  _dl_audit_activity_nsid (ns, LA_ACT_DELETE);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <span class="hljs-comment">/* Now we can allocate an array to hold all the pointers and</span><br><span class="hljs-comment">     copy the pointers in.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">maps</span>[<span class="hljs-title">nloaded</span>];</span><br><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">l</span>;</span><br>  assert (nloaded != <span class="hljs-number">0</span> || GL(dl_ns)[ns]._ns_loaded == <span class="hljs-literal">NULL</span>);<br>  <span class="hljs-keyword">for</span> (l = GL(dl_ns)[ns]._ns_loaded, i = <span class="hljs-number">0</span>; l != <span class="hljs-literal">NULL</span>; l = l-&gt;l_next)<br>    <span class="hljs-comment">/* Do not handle ld.so in secondary namespaces.  */</span><br>    <span class="hljs-keyword">if</span> (l == l-&gt;l_real)<br>      &#123;<br>assert (i &lt; nloaded);<br><br>maps[i] = l;<br>l-&gt;l_idx = i;<br>++i;<br><br><span class="hljs-comment">/* Bump l_direct_opencount of all objects so that they</span><br><span class="hljs-comment">   are not dlclose()ed from underneath us.  */</span><br>++l-&gt;l_direct_opencount;<br>      &#125;<br>  assert (ns != LM_ID_BASE || i == nloaded);<br>  assert (ns == LM_ID_BASE || i == nloaded || i == nloaded - <span class="hljs-number">1</span>);<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> nmaps = i;<br><br>  <span class="hljs-comment">/* Now we have to do the sorting.  We can skip looking for the</span><br><span class="hljs-comment">     binary itself which is at the front of the search list for</span><br><span class="hljs-comment">     the main namespace.  */</span><br>  _dl_sort_maps (maps, nmaps, (ns == LM_ID_BASE), <span class="hljs-literal">true</span>);<br><br>  <span class="hljs-comment">/* We do not rely on the linked list of loaded object anymore</span><br><span class="hljs-comment">     from this point on.  We have our own list here (maps).  The</span><br><span class="hljs-comment">     various members of this list cannot vanish since the open</span><br><span class="hljs-comment">     count is too high and will be decremented in this loop.  So</span><br><span class="hljs-comment">     we release the lock so that some code which might be called</span><br><span class="hljs-comment">     from a destructor can directly or indirectly access the</span><br><span class="hljs-comment">     lock.  */</span><br>  __rtld_lock_unlock_recursive (GL(dl_load_lock));<br><br>  <span class="hljs-comment">/* &#x27;maps&#x27; now contains the objects in the right order.  Now</span><br><span class="hljs-comment">     call the destructors.  We have to process this array from</span><br><span class="hljs-comment">     the front.  */</span><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; nmaps; ++i)<br>    &#123;<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">l</span> =</span> maps[i];<br><br>      <span class="hljs-keyword">if</span> (l-&gt;l_init_called)<br>&#123;<br>  _dl_call_fini (l);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SHARED</span><br>  <span class="hljs-comment">/* Auditing checkpoint: another object closed.  */</span><br>  _dl_audit_objclose (l);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><br>      <span class="hljs-comment">/* Correct the previous increment.  */</span><br>      --l-&gt;l_direct_opencount;<br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SHARED</span><br>  _dl_audit_activity_nsid (ns, LA_ACT_CONSISTENT);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SHARED</span><br>  <span class="hljs-keyword">if</span> (! do_audit &amp;&amp; GLRO(dl_naudit) &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>      do_audit = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">goto</span> again;<br>    &#125;<br><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (GLRO(dl_debug_mask) &amp; DL_DEBUG_STATISTICS))<br>    _dl_debug_printf (<span class="hljs-string">&quot;\nruntime linker statistics:\n&quot;</span><br>      <span class="hljs-string">&quot;           final number of relocations: %lu\n&quot;</span><br>      <span class="hljs-string">&quot;final number of relocations from cache: %lu\n&quot;</span>,<br>      GL(dl_num_relocations),<br>      GL(dl_num_cache_relocations));<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="主程序的运行"><a href="#主程序的运行" class="headerlink" title="主程序的运行"></a>主程序的运行</h1><p>这里主要对CRT各个重要部分进行介绍</p><p>主要调用链：<code>_start -&gt; _libc_start_main -&gt; main -&gt; exit</code></p><h2 id="start-1"><a href="#start-1" class="headerlink" title="_start"></a>_start</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> _noreturn <span class="hljs-title function_">start</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[], <span class="hljs-type">char</span> *envp[])</span> &#123;<br>    _libc_start_main(main, argc, argv, init, fini, rtld_fini, &amp;stack_end);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="libc-start-main"><a href="#libc-start-main" class="headerlink" title="_libc_start_main"></a>_libc_start_main</h2><p>这个函数主要对必要的全局变量进行初始化、注册全局析构函数、调用全局初始化函数并最后调用<code>__libc_start_call_main</code>启动<code>main</code></p><ol><li>初始化环境变量指针、栈最高地址</li><li>解析可调参数（通过环境变量设置某些全局变量的值）</li><li>调用<code>_dl_relocate_static_pie</code>、<code>ARCH_SETUP_IREL</code>对开启PIE的程序进行重定位</li><li>调用<code>ARCH_APPLY_IREL</code>初始化<code>TLS</code></li><li>调用<code>_dl_setup_pointer_guard</code>得到<code>stack_chk_guard</code></li><li>注册全局析构函数<code>_dl_fini</code></li><li>调用<code>__libc_early_init</code>初始化<code>pthread</code></li><li>注册全局析构函数<code>call_fini</code></li><li>调用全局初始化函数<code>init</code>、<code>call_init</code></li><li>调用<code>_dl_audit_preinit</code>初始化<code>ld</code>审计机制并初始化<code>ld</code>调试器</li><li>调用 <code>__libc_start_call_main</code></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs c">STATIC <span class="hljs-type">int</span><br>    <span class="hljs-title function_">LIBC_START_MAIN</span> <span class="hljs-params">(<span class="hljs-type">int</span> (*main) (<span class="hljs-type">int</span>, <span class="hljs-type">char</span> **, <span class="hljs-type">char</span> ** MAIN_AUXVEC_DECL),</span><br><span class="hljs-params">                     <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv,</span><br><span class="hljs-params">                     #ifdef LIBC_START_MAIN_AUXVEC_ARG</span><br><span class="hljs-params">                     ElfW(<span class="hljs-type">auxv_t</span>) *auxvec,</span><br><span class="hljs-params">                     #endif</span><br><span class="hljs-params">                     __typeof (main) init,</span><br><span class="hljs-params">                     <span class="hljs-type">void</span> (*fini) (<span class="hljs-type">void</span>),</span><br><span class="hljs-params">                     <span class="hljs-type">void</span> (*rtld_fini) (<span class="hljs-type">void</span>), <span class="hljs-type">void</span> *stack_end)</span><br>&#123;<br>    <span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> SHARED</span><br>    <span class="hljs-type">char</span> **ev = &amp;argv[argc + <span class="hljs-number">1</span>];<br><br>    __environ = ev;<br><br>    <span class="hljs-comment">/* Store the lowest stack address.  This is done in ld.so if this is</span><br><span class="hljs-comment">     the code for the DSO.  */</span><br>    __libc_stack_end = stack_end;<br><br>    <span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> HAVE_AUX_VECTOR</span><br>    <span class="hljs-comment">/* First process the auxiliary vector since we need to find the</span><br><span class="hljs-comment">     program header to locate an eventually present PT_TLS entry.  */</span><br>    <span class="hljs-meta">#  <span class="hljs-keyword">ifndef</span> LIBC_START_MAIN_AUXVEC_ARG</span><br>    ElfW(<span class="hljs-type">auxv_t</span>) *auxvec;<br>    &#123;<br>        <span class="hljs-type">char</span> **evp = ev;<br>        <span class="hljs-keyword">while</span> (*evp++ != <span class="hljs-literal">NULL</span>)<br>            ;<br>        auxvec = (ElfW(<span class="hljs-type">auxv_t</span>) *) evp;<br>    &#125;<br>    <span class="hljs-meta">#  <span class="hljs-keyword">endif</span></span><br>    _dl_aux_init (auxvec);<br>    <span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br>    __tunables_init (__environ);<br><br>    ARCH_INIT_CPU_FEATURES ();<br><br>    <span class="hljs-comment">/* Do static pie self relocation after tunables and cpu features</span><br><span class="hljs-comment">     are setup for ifunc resolvers. Before this point relocations</span><br><span class="hljs-comment">     must be avoided.  */</span><br>    _dl_relocate_static_pie ();<br><br>    <span class="hljs-comment">/* Perform IREL&#123;,A&#125; relocations.  */</span><br>    ARCH_SETUP_IREL ();<br><br>    <span class="hljs-comment">/* The stack guard goes into the TCB, so initialize it early.  */</span><br>    ARCH_SETUP_TLS ();<br><br>    <span class="hljs-comment">/* In some architectures, IREL&#123;,A&#125; relocations happen after TLS setup in</span><br><span class="hljs-comment">     order to let IFUNC resolvers benefit from TCB information, e.g. powerpc&#x27;s</span><br><span class="hljs-comment">     hwcap and platform fields available in the TCB.  */</span><br>    ARCH_APPLY_IREL ();<br><br>    <span class="hljs-comment">/* Set up the stack checker&#x27;s canary.  */</span><br>    <span class="hljs-type">uintptr_t</span> stack_chk_guard = _dl_setup_stack_chk_guard (_dl_random);<br>    <span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> THREAD_SET_STACK_GUARD</span><br>    THREAD_SET_STACK_GUARD (stack_chk_guard);<br>    <span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br>    __stack_chk_guard = stack_chk_guard;<br>    <span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">/* Initialize libpthread if linked in.  */</span><br>    <span class="hljs-keyword">if</span> (__pthread_initialize_minimal != <span class="hljs-literal">NULL</span>)<br>        __pthread_initialize_minimal ();<br><br>    <span class="hljs-comment">/* Set up the pointer guard value.  */</span><br>    <span class="hljs-type">uintptr_t</span> pointer_chk_guard = _dl_setup_pointer_guard (_dl_random,<br>                                                           stack_chk_guard);<br>    <span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> THREAD_SET_POINTER_GUARD</span><br>    THREAD_SET_POINTER_GUARD (pointer_chk_guard);<br>    <span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br>    __pointer_chk_guard_local = pointer_chk_guard;<br>    <span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* !SHARED  */</span></span><br><br>    <span class="hljs-comment">/* Register the destructor of the dynamic linker if there is any.  */</span><br>    <span class="hljs-keyword">if</span> (__glibc_likely (rtld_fini != <span class="hljs-literal">NULL</span>))<br>        __cxa_atexit ((<span class="hljs-type">void</span> (*) (<span class="hljs-type">void</span> *)) rtld_fini, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> SHARED</span><br>    <span class="hljs-comment">/* Perform early initialization.  In the shared case, this function</span><br><span class="hljs-comment">     is called from the dynamic loader as early as possible.  */</span><br>    __libc_early_init (<span class="hljs-literal">true</span>);<br><br>    <span class="hljs-comment">/* Call the initializer of the libc.  This is only needed here if we</span><br><span class="hljs-comment">     are compiling for the static library in which case we haven&#x27;t</span><br><span class="hljs-comment">     run the constructors in `_dl_start_user&#x27;.  */</span><br>    __libc_init_first (argc, argv, __environ);<br><br>    <span class="hljs-comment">/* Register the destructor of the statically-linked program.  */</span><br>    __cxa_atexit (call_fini, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-comment">/* Some security at this point.  Prevent starting a SUID binary where</span><br><span class="hljs-comment">     the standard file descriptors are not opened.  We have to do this</span><br><span class="hljs-comment">     only for statically linked applications since otherwise the dynamic</span><br><span class="hljs-comment">     loader did the work already.  */</span><br>    <span class="hljs-keyword">if</span> (__builtin_expect (__libc_enable_secure, <span class="hljs-number">0</span>))<br>        __libc_check_standard_fds ();<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* !SHARED */</span></span><br><br>    <span class="hljs-comment">/* Call the initializer of the program, if any.  */</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SHARED</span><br>    <span class="hljs-keyword">if</span> (__builtin_expect (GLRO(dl_debug_mask) &amp; DL_DEBUG_IMPCALLS, <span class="hljs-number">0</span>))<br>        GLRO(dl_debug_printf) (<span class="hljs-string">&quot;\ninitialize program: %s\n\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-keyword">if</span> (init != <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-comment">/* This is a legacy program which supplied its own init</span><br><span class="hljs-comment">       routine.  */</span><br>        (*init) (argc, argv, __environ MAIN_AUXVEC_PARAM);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-comment">/* This is a current program.  Use the dynamic segment to find</span><br><span class="hljs-comment">       constructors.  */</span><br>        call_init (argc, argv, __environ);<br><br>    <span class="hljs-comment">/* Auditing checkpoint: we have a new object.  */</span><br>    _dl_audit_preinit (GL(dl_ns)[LM_ID_BASE]._ns_loaded);<br><br>    <span class="hljs-keyword">if</span> (__glibc_unlikely (GLRO(dl_debug_mask) &amp; DL_DEBUG_IMPCALLS))<br>        GLRO(dl_debug_printf) (<span class="hljs-string">&quot;\ntransferring control: %s\n\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span> <span class="hljs-comment">/* !SHARED */</span></span><br>    call_init (argc, argv, __environ);<br><br>    _dl_debug_initialize (<span class="hljs-number">0</span>, LM_ID_BASE);<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    __libc_start_call_main (main, argc, argv MAIN_AUXVEC_PARAM);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="libc-start-call-main"><a href="#libc-start-call-main" class="headerlink" title="__libc_start_call_main"></a>__libc_start_call_main</h3><p>调用<code>main</code>并将其返回值交给<code>exit</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __libc_start_call_main (<span class="hljs-type">int</span> (*main) (<span class="hljs-type">int</span>, <span class="hljs-type">char</span> **, <span class="hljs-type">char</span> ** MAIN_AUXVEC_DECL),<br>                        <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv MAIN_AUXVEC_DECL)<br>&#123;<br>  <span class="hljs-built_in">exit</span> (main (argc, argv, __environ MAIN_AUXVEC_PARAM));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><p>默认的程序主函数，程序的主要逻辑从这里开始</p><h2 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">exit</span> <span class="hljs-params">(<span class="hljs-type">int</span> status)</span><br>&#123;<br>  __run_exit_handlers (status, &amp;__exit_funcs, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="run-exit-handlers"><a href="#run-exit-handlers" class="headerlink" title="__run_exit_handlers"></a>__run_exit_handlers</h3><p>遍历<code>atexit</code>注册的全局析构函数，并逐个调用，使用<code>_IO_cleanup</code>清理IO，最后调用<code>_exit</code>终止程序的执行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __run_exit_handlers (<span class="hljs-type">int</span> status, <span class="hljs-keyword">struct</span> exit_function_list **listp,<br>     <span class="hljs-type">bool</span> run_list_atexit, <span class="hljs-type">bool</span> run_dtors)<br>&#123;<br>  <span class="hljs-comment">/* First, call the TLS destructors.  */</span><br>  <span class="hljs-keyword">if</span> (run_dtors)<br>    call_function_static_weak (__call_tls_dtors);<br><br>  __libc_lock_lock (__exit_funcs_lock);<br><br>  <span class="hljs-comment">/* We do it this way to handle recursive calls to exit () made by</span><br><span class="hljs-comment">     the functions registered with `atexit&#x27; and `on_exit&#x27;. We call</span><br><span class="hljs-comment">     everyone on the list and use the status value in the last</span><br><span class="hljs-comment">     exit (). */</span><br>  <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>    &#123;<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">exit_function_list</span> *<span class="hljs-title">cur</span>;</span><br><br>    restart:<br>      cur = *listp;<br><br>      <span class="hljs-keyword">if</span> (cur == <span class="hljs-literal">NULL</span>)<br>&#123;<br>  <span class="hljs-comment">/* Exit processing complete.  We will not allow any more</span><br><span class="hljs-comment">     atexit/on_exit registrations.  */</span><br>  __exit_funcs_done = <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">break</span>;<br>&#125;<br><br>      <span class="hljs-keyword">while</span> (cur-&gt;idx &gt; <span class="hljs-number">0</span>)<br>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">exit_function</span> *<span class="hljs-title">const</span> <span class="hljs-title">f</span> =</span> &amp;cur-&gt;fns[--cur-&gt;idx];<br>  <span class="hljs-type">const</span> <span class="hljs-type">uint64_t</span> new_exitfn_called = __new_exitfn_called;<br><br>  <span class="hljs-keyword">switch</span> (f-&gt;flavor)<br>    &#123;<br>      <span class="hljs-type">void</span> (*atfct) (<span class="hljs-type">void</span>);<br>      <span class="hljs-type">void</span> (*onfct) (<span class="hljs-type">int</span> status, <span class="hljs-type">void</span> *arg);<br>      <span class="hljs-type">void</span> (*cxafct) (<span class="hljs-type">void</span> *arg, <span class="hljs-type">int</span> status);<br>      <span class="hljs-type">void</span> *arg;<br><br>    <span class="hljs-keyword">case</span> ef_free:<br>    <span class="hljs-keyword">case</span> ef_us:<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> ef_on:<br>      onfct = f-&gt;func.on.fn;<br>      arg = f-&gt;func.on.arg;<br>      PTR_DEMANGLE (onfct);<br><br>      <span class="hljs-comment">/* Unlock the list while we call a foreign function.  */</span><br>      __libc_lock_unlock (__exit_funcs_lock);<br>      onfct (status, arg);<br>      __libc_lock_lock (__exit_funcs_lock);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> ef_at:<br>      atfct = f-&gt;func.at;<br>      PTR_DEMANGLE (atfct);<br><br>      <span class="hljs-comment">/* Unlock the list while we call a foreign function.  */</span><br>      __libc_lock_unlock (__exit_funcs_lock);<br>      atfct ();<br>      __libc_lock_lock (__exit_funcs_lock);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> ef_cxa:<br>      <span class="hljs-comment">/* To avoid dlclose/exit race calling cxafct twice (BZ 22180),</span><br><span class="hljs-comment"> we must mark this function as ef_free.  */</span><br>      f-&gt;flavor = ef_free;<br>      cxafct = f-&gt;func.cxa.fn;<br>      arg = f-&gt;func.cxa.arg;<br>      PTR_DEMANGLE (cxafct);<br><br>      <span class="hljs-comment">/* Unlock the list while we call a foreign function.  */</span><br>      __libc_lock_unlock (__exit_funcs_lock);<br>      cxafct (arg, status);<br>      __libc_lock_lock (__exit_funcs_lock);<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (new_exitfn_called != __new_exitfn_called))<br>    <span class="hljs-comment">/* The last exit function, or another thread, has registered</span><br><span class="hljs-comment">       more exit functions.  Start the loop over.  */</span><br>    <span class="hljs-keyword">goto</span> restart;<br>&#125;<br><br>      *listp = cur-&gt;next;<br>      <span class="hljs-keyword">if</span> (*listp != <span class="hljs-literal">NULL</span>)<br><span class="hljs-comment">/* Don&#x27;t free the last element in the chain, this is the statically</span><br><span class="hljs-comment">   allocate element.  */</span><br><span class="hljs-built_in">free</span> (cur);<br>    &#125;<br><br>  __libc_lock_unlock (__exit_funcs_lock);<br><br>  <span class="hljs-keyword">if</span> (run_list_atexit)<br>    call_function_static_weak (_IO_cleanup);<br><br>  _exit (status);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="IO-cleanup"><a href="#IO-cleanup" class="headerlink" title="_IO_cleanup"></a>_IO_cleanup</h3><p>使用<code>_IO_flush_all</code>刷新所有缓冲区，并使用<code>_IO_unbuffer_all</code>清空缓冲区的内容，保证所有数据写入对应文件或设备中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> _IO_cleanup (<span class="hljs-type">void</span>)<br>&#123;<br>  <span class="hljs-type">int</span> result = _IO_flush_all ();<br><br>  <span class="hljs-comment">/* We currently don&#x27;t have a reliable mechanism for making sure that</span><br><span class="hljs-comment">     C++ static destructors are executed in the correct order.</span><br><span class="hljs-comment">     So it is possible that other static destructors might want to</span><br><span class="hljs-comment">     write to cout - and they&#x27;re supposed to be able to do so.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     The following will make the standard streambufs be unbuffered,</span><br><span class="hljs-comment">     which forces any output from late destructors to be written out. */</span><br>  _IO_unbuffer_all ();<br><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h1><h2 id="dl-runtime-resolve"><a href="#dl-runtime-resolve" class="headerlink" title="_dl_runtime_resolve"></a>_dl_runtime_resolve</h2><p>这是一串汇编，最终会调用<code>_dl_fixup</code></p><h3 id="dl-fixup"><a href="#dl-fixup" class="headerlink" title="_dl_fixup"></a>_dl_fixup</h3><p>逻辑上有三步：</p><ol><li><p>首先通过计算得到符号名（一个字符串）</p></li><li><p>然后到对应的库中通过符号名寻找符号对应地址（内存地址）</p></li><li><p>将得到的地址写回需要重定位的位置</p></li></ol><p>具体实现：</p><ol><li>通过linkmap获取<code>strtab</code>、<code>strtab</code>、<code>pltgot</code>的基址</li><li>计算重定位表<code>reloc</code>地址、并依此得到<code>sym</code>表地址</li><li>获取需要重定位的位置，一般是got表地址</li><li>TODO</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs c">DL_FIXUP_VALUE_TYPE _dl_fixup (<br>    <span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> ELF_MACHINE_RUNTIME_FIXUP_ARGS</span><br>    ELF_MACHINE_RUNTIME_FIXUP_ARGS,<br>    <span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br>    <span class="hljs-keyword">struct</span> link_map *l, ElfW(Word) reloc_arg)<br>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Sym)</span> *<span class="hljs-type">const</span> symtab<br>        = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *strtab = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) D_PTR (l, l_info[DT_STRTAB]);<br><br>    <span class="hljs-type">const</span> <span class="hljs-type">uintptr_t</span> pltgot = (<span class="hljs-type">uintptr_t</span>) D_PTR (l, l_info[DT_PLTGOT]);<br><br>    <span class="hljs-type">const</span> PLTREL *<span class="hljs-type">const</span> reloc = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset (pltgot, reloc_arg));<br>    <span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Sym)</span> *sym = &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];<br>    <span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Sym)</span> *refsym = sym;<br>    <span class="hljs-type">void</span> *<span class="hljs-type">const</span> rel_addr = (<span class="hljs-type">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);<br>    <span class="hljs-type">lookup_t</span> result;<br>    DL_FIXUP_VALUE_TYPE value;<br><br>    <span class="hljs-comment">/* Sanity check that we&#x27;re really looking at a PLT relocation.  */</span><br>    assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);<br><br>    <span class="hljs-comment">/* Look up the target symbol.  If the normal lookup rules are not</span><br><span class="hljs-comment">      used don&#x27;t look in the global scope.  */</span><br>    <span class="hljs-keyword">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="hljs-number">0</span>) == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">r_found_version</span> *<span class="hljs-title">version</span> =</span> <span class="hljs-literal">NULL</span>;<br><br>        <span class="hljs-keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            <span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Half)</span> *vernum =<br>                (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);<br>            ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="hljs-number">0x7fff</span>;<br>            version = &amp;l-&gt;l_versions[ndx];<br>            <span class="hljs-keyword">if</span> (version-&gt;hash == <span class="hljs-number">0</span>)<br>                version = <span class="hljs-literal">NULL</span>;<br>        &#125;<br><br>        <span class="hljs-comment">/* We need to keep the scope around so do some locking.  This is</span><br><span class="hljs-comment"> not necessary for objects which cannot be unloaded or when</span><br><span class="hljs-comment"> we are not using any threads (yet).  */</span><br>        <span class="hljs-type">int</span> flags = DL_LOOKUP_ADD_DEPENDENCY;<br>        <span class="hljs-keyword">if</span> (!RTLD_SINGLE_THREAD_P)<br>        &#123;<br>            THREAD_GSCOPE_SET_FLAG ();<br>            flags |= DL_LOOKUP_GSCOPE_LOCK;<br>        &#125;<br><br>        <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RTLD_ENABLE_FOREIGN_CALL</span><br>        RTLD_ENABLE_FOREIGN_CALL;<br>        <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>        result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,<br>                                      version, ELF_RTYPE_CLASS_PLT, flags, <span class="hljs-literal">NULL</span>);<br><br>        <span class="hljs-comment">/* We are done with the global scope.  */</span><br>        <span class="hljs-keyword">if</span> (!RTLD_SINGLE_THREAD_P)<br>            THREAD_GSCOPE_RESET_FLAG ();<br><br>        <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RTLD_FINALIZE_FOREIGN_CALL</span><br>        RTLD_FINALIZE_FOREIGN_CALL;<br>        <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>        <span class="hljs-comment">/* Currently result contains the base load address (or link map)</span><br><span class="hljs-comment"> of the object that defines sym.  Now add in the symbol</span><br><span class="hljs-comment"> offset.  */</span><br>        value = DL_FIXUP_MAKE_VALUE (result,<br>                                     SYMBOL_ADDRESS (result, sym, <span class="hljs-literal">false</span>));<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">/* We already found the symbol.  The module (and therefore its load</span><br><span class="hljs-comment"> address) is also known.  */</span><br>        value = DL_FIXUP_MAKE_VALUE (l, SYMBOL_ADDRESS (l, sym, <span class="hljs-literal">true</span>));<br>        result = l;<br>    &#125;<br><br>    <span class="hljs-comment">/* And now perhaps the relocation addend.  */</span><br>    value = elf_machine_plt_value (l, reloc, value);<br><br>    <span class="hljs-keyword">if</span> (sym != <span class="hljs-literal">NULL</span><br>        &amp;&amp; __builtin_expect (ELFW(ST_TYPE) (sym-&gt;st_info) == STT_GNU_IFUNC, <span class="hljs-number">0</span>))<br>        value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));<br><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SHARED</span><br>    <span class="hljs-comment">/* Auditing checkpoint: we have a new binding.  Provide the auditing</span><br><span class="hljs-comment">     libraries the possibility to change the value and tell us whether further</span><br><span class="hljs-comment">     auditing is wanted.</span><br><span class="hljs-comment">     The l_reloc_result is only allocated if there is an audit module which</span><br><span class="hljs-comment">     provides a la_symbind.  */</span><br>    <span class="hljs-keyword">if</span> (l-&gt;l_reloc_result != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-comment">/* This is the address in the array where we store the result of previous</span><br><span class="hljs-comment"> relocations.  */</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">reloc_result</span> *<span class="hljs-title">reloc_result</span></span><br><span class="hljs-class">            =</span> &amp;l-&gt;l_reloc_result[reloc_index (pltgot, reloc_arg, <span class="hljs-keyword">sizeof</span> (PLTREL))];<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> init = atomic_load_acquire (&amp;reloc_result-&gt;init);<br>        <span class="hljs-keyword">if</span> (init == <span class="hljs-number">0</span>)<br>        &#123;<br>            _dl_audit_symbind (l, reloc_result, reloc, sym, &amp;value, result, <span class="hljs-literal">true</span>);<br><br>            <span class="hljs-comment">/* Store the result for later runs.  */</span><br>            <span class="hljs-keyword">if</span> (__glibc_likely (! GLRO(dl_bind_not)))<br>            &#123;<br>                reloc_result-&gt;addr = value;<br>                <span class="hljs-comment">/* Guarantee all previous writes complete before init is</span><br><span class="hljs-comment"> updated.  See CONCURRENCY NOTES below.  */</span><br>                atomic_store_release (&amp;reloc_result-&gt;init, <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            value = reloc_result-&gt;addr;<br>    &#125;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">/* Finally, fix up the plt itself.  */</span><br>    <span class="hljs-keyword">if</span> (__glibc_unlikely (GLRO(dl_bind_not)))<br>        <span class="hljs-keyword">return</span> value;<br><br>    <span class="hljs-keyword">return</span> elf_machine_fixup_plt (l, result, refsym, sym, reloc, rel_addr, value);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="gmon-start"><a href="#gmon-start" class="headerlink" title="gmon_start"></a><strong>gmon_start</strong></h2><p>初始化gprof，用于性能测试，位于<code>.fini</code>段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __gmon_start__ (<span class="hljs-type">void</span>)<br>&#123;<br>  <span class="hljs-comment">/* Protect from being called more than once.  Since crti.o is linked</span><br><span class="hljs-comment">     into every shared library, each of their init functions will call us.  */</span><br>  <span class="hljs-type">static</span> <span class="hljs-type">int</span> called;<br><br>  <span class="hljs-keyword">if</span> (called)<br>    <span class="hljs-keyword">return</span>;<br><br>  called = <span class="hljs-number">1</span>;<br><br>  <span class="hljs-comment">/* Start keeping profiling records.  */</span><br>  __monstartup ((u_long) &amp;__executable_start, (u_long) &amp;etext);<br><br>  <span class="hljs-comment">/* Call _mcleanup before exiting; it will write out gmon.out from the</span><br><span class="hljs-comment">     collected data.  */</span><br>  atexit (&amp;_mcleanup);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://zhuanlan.zhihu.com/p/674171271">【进程管理】exec实现机制二——内核实现 - 知乎</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>溢出类漏洞</title>
    <link href="/2025/01/16/overflow/"/>
    <url>/2025/01/16/overflow/</url>
    
    <content type="html"><![CDATA[<h1 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h1><p>当程序向缓冲区（例如数组、堆栈等）中写入的数据量超过了该缓冲区的边界限制时，就会发生缓冲区溢出。这会导致超出部分的数据覆盖相邻的内存空间，可能导致程序崩溃、行为异常或者被利用来进行安全攻击，如执行恶意代码。这是越界写入的一种具体情形。</p><h2 id="栈上的缓冲区溢出"><a href="#栈上的缓冲区溢出" class="headerlink" title="栈上的缓冲区溢出"></a>栈上的缓冲区溢出</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> target = <span class="hljs-number">0UL</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> buffer = <span class="hljs-number">0UL</span>;<br><br>    read(<span class="hljs-number">0</span>, &amp;buffer, <span class="hljs-number">0x10</span>);<br>    <span class="hljs-keyword">if</span> (target == <span class="hljs-number">0xdeadbeef</span>UL) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;A stack buffer overflow occurred!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io: process = process(<span class="hljs-string">&#x27;./a.out&#x27;</span>)<br>io.send(cyclic(<span class="hljs-number">0x8</span>)+ p64(<span class="hljs-number">0xdeadbeef</span>))<br>io.interactive()<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">A stack buffer overflow occurred!<br></code></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>&emsp;&emsp;这里使用<code>read</code>从标准输入向<code>buffer</code>中读入16字节数据，而<code>buffer</code>的大小只有8字节(<code>sizeof(unsigned long)</code>)。<strong>当我们向<code>buffer</code>写入超过8字节数据时，由于<code>read</code>从低地址向高地址写入数据，超出缓冲区的数据会被写入到更高地址变量<code>target</code>中。</strong>也就是说，我们可以修改<code>target</code>的内容。</p><p>&emsp;&emsp;这提醒我们，变量只是在C语言中编译期的概念，而在运行时已经没有了变量的概念，只有内存地址和值的概念，因此对变量大小的约束在运行时失去了作用。</p><h2 id="堆上的缓冲区溢出"><a href="#堆上的缓冲区溢出" class="headerlink" title="堆上的缓冲区溢出"></a>堆上的缓冲区溢出</h2><p>通过<code>malloc</code>等动态分配内存函数分配的内存位于堆上。在堆上的缓冲区溢出与栈上不同，对于<code>glibc</code>，每个分配的堆内存前方有一个chunk结构，也就是说，如果想要直接修改下一个堆块内存数据需要更大的溢出。但在堆攻击中，我们关注的是chunk头而非数据本身。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> *buffer = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *target = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x8</span>);<br>    <br>    read(<span class="hljs-number">0</span>, buffer, <span class="hljs-number">0x28</span>);<br>    <span class="hljs-keyword">if</span> (*target == <span class="hljs-number">0xdeadbeef</span>UL) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;A heap buffer overflow occurred!&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">free</span>(target);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io: process = process(<span class="hljs-string">&#x27;./a.out&#x27;</span>)<br>io.send(cyclic(<span class="hljs-number">0x10</span>) + cyclic(<span class="hljs-number">0x10</span>) + p64(<span class="hljs-number">0xdeadbeef</span>))<br>io.interactive()<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">A heap buffer <span class="hljs-attribute">overflow</span> occurred!<br><span class="hljs-function"><span class="hljs-title">munmap_chunk</span><span class="hljs-params">()</span></span>: invalid pointer<br></code></pre></td></tr></table></figure><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>&emsp;&emsp;这里使用<code>read(0, buffer, 0x28)</code>从标准输入向<code>buffer</code>读入0x28大小数据，超过了<code>buffer</code>的大小(0x10)。但与栈溢出不同的是，为了覆盖<code>target</code>的值，我们在中间多写入0x10个数据，来覆盖chunk头。也就是说，在堆上分配的内存并非是直接连续相连的，每个<code>malloc</code>返回的内存前方都会有一个chunk头（大小为0x10），当chunk头被破坏时，<code>free</code>将无法发挥作用。因此当我们free掉这个被破坏chunk头的堆块时，<code>glibc</code>报错，程序终止运行。</p><h1 id="整数溢出"><a href="#整数溢出" class="headerlink" title="整数溢出"></a>整数溢出</h1><h2 id="隐式转换溢出"><a href="#隐式转换溢出" class="headerlink" title="隐式转换溢出"></a>隐式转换溢出</h2><h3 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a>POC</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%u\n&quot;</span>, <span class="hljs-number">-1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在我的64位Ubuntu上，结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs p">4294967295<br></code></pre></td></tr></table></figure><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>这里以打印无符号数的方式打印了<code>-1</code>，这个过程中发生了隐式转换<code>(unsigned int)(-1)</code>。在计算机中，**一般有符号整数使用其补码表示，其二进制形式为32个1，而将其看作一个无符号数时，也就是4294967295(2<sup>32</sup>-1)**，这是一个非常大的整数。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
